// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod golem {
  pub mod rpc {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type NodeIndex = i32;
      #[derive(Clone)]
      pub struct Uri {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Uri {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Uri").field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub enum WitNode{
        RecordValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        VariantValue((u32,Option<NodeIndex>,)),
        EnumValue(u32),
        FlagsValue(wit_bindgen::rt::vec::Vec::<bool>),
        TupleValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        ListValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        OptionValue(Option<NodeIndex>),
        ResultValue(Result<Option<NodeIndex>,Option<NodeIndex>>),
        PrimU8(u8),
        PrimU16(u16),
        PrimU32(u32),
        PrimU64(u64),
        PrimS8(i8),
        PrimS16(i16),
        PrimS32(i32),
        PrimS64(i64),
        PrimFloat32(f32),
        PrimFloat64(f64),
        PrimChar(char),
        PrimBool(bool),
        PrimString(wit_bindgen::rt::string::String),
        Handle((Uri,u64,)),
      }
      impl ::core::fmt::Debug for WitNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            WitNode::RecordValue(e) => {
              f.debug_tuple("WitNode::RecordValue").field(e).finish()
            }
            WitNode::VariantValue(e) => {
              f.debug_tuple("WitNode::VariantValue").field(e).finish()
            }
            WitNode::EnumValue(e) => {
              f.debug_tuple("WitNode::EnumValue").field(e).finish()
            }
            WitNode::FlagsValue(e) => {
              f.debug_tuple("WitNode::FlagsValue").field(e).finish()
            }
            WitNode::TupleValue(e) => {
              f.debug_tuple("WitNode::TupleValue").field(e).finish()
            }
            WitNode::ListValue(e) => {
              f.debug_tuple("WitNode::ListValue").field(e).finish()
            }
            WitNode::OptionValue(e) => {
              f.debug_tuple("WitNode::OptionValue").field(e).finish()
            }
            WitNode::ResultValue(e) => {
              f.debug_tuple("WitNode::ResultValue").field(e).finish()
            }
            WitNode::PrimU8(e) => {
              f.debug_tuple("WitNode::PrimU8").field(e).finish()
            }
            WitNode::PrimU16(e) => {
              f.debug_tuple("WitNode::PrimU16").field(e).finish()
            }
            WitNode::PrimU32(e) => {
              f.debug_tuple("WitNode::PrimU32").field(e).finish()
            }
            WitNode::PrimU64(e) => {
              f.debug_tuple("WitNode::PrimU64").field(e).finish()
            }
            WitNode::PrimS8(e) => {
              f.debug_tuple("WitNode::PrimS8").field(e).finish()
            }
            WitNode::PrimS16(e) => {
              f.debug_tuple("WitNode::PrimS16").field(e).finish()
            }
            WitNode::PrimS32(e) => {
              f.debug_tuple("WitNode::PrimS32").field(e).finish()
            }
            WitNode::PrimS64(e) => {
              f.debug_tuple("WitNode::PrimS64").field(e).finish()
            }
            WitNode::PrimFloat32(e) => {
              f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
            }
            WitNode::PrimFloat64(e) => {
              f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
            }
            WitNode::PrimChar(e) => {
              f.debug_tuple("WitNode::PrimChar").field(e).finish()
            }
            WitNode::PrimBool(e) => {
              f.debug_tuple("WitNode::PrimBool").field(e).finish()
            }
            WitNode::PrimString(e) => {
              f.debug_tuple("WitNode::PrimString").field(e).finish()
            }
            WitNode::Handle(e) => {
              f.debug_tuple("WitNode::Handle").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct WitValue {
        pub nodes: wit_bindgen::rt::vec::Vec::<WitNode>,
      }
      impl ::core::fmt::Debug for WitValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
        }
      }
      #[derive(Clone)]
      pub enum RpcError{
        ProtocolError(wit_bindgen::rt::string::String),
        Denied(wit_bindgen::rt::string::String),
        NotFound(wit_bindgen::rt::string::String),
        RemoteInternalError(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            RpcError::ProtocolError(e) => {
              f.debug_tuple("RpcError::ProtocolError").field(e).finish()
            }
            RpcError::Denied(e) => {
              f.debug_tuple("RpcError::Denied").field(e).finish()
            }
            RpcError::NotFound(e) => {
              f.debug_tuple("RpcError::NotFound").field(e).finish()
            }
            RpcError::RemoteInternalError(e) => {
              f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for RpcError {}
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct WasmRpc{
        handle: wit_bindgen::rt::Resource<WasmRpc>,
      }
      
      impl WasmRpc{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for WasmRpc{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[resource-drop]wasm-rpc"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[constructor]wasm-rpc"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            WasmRpc::from_handle(ret as u32)
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await(&self,function_name: &str,function_params: &[WitValue],) -> Result<WitValue,RpcError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let mut cleanup_list = Vec::new();
            
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec12 = function_params;
            let len12 = vec12.len() as i32;
            let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
            let result12 = if layout12.size() != 0
            {
              let ptr = alloc::alloc(layout12);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout12);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec12.into_iter().enumerate() {
              let base = result12 as i32 + (i as i32) * 8;
              {
                let WitValue{ nodes:nodes1, } = e;
                let vec11 = nodes1;
                let len11 = vec11.len() as i32;
                let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                let result11 = if layout11.size() != 0
                {
                  let ptr = alloc::alloc(layout11);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout11);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec11.into_iter().enumerate() {
                  let base = result11 as i32 + (i as i32) * 24;
                  {
                    match e {
                      WitNode::RecordValue(e) => {
                        *((base + 0) as *mut u8) = (0i32) as u8;
                        let vec2 = e;
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        *((base + 12) as *mut i32) = len2;
                        *((base + 8) as *mut i32) = ptr2;
                      },
                      WitNode::VariantValue(e) => {
                        *((base + 0) as *mut u8) = (1i32) as u8;
                        let (t3_0, t3_1, ) = e;
                        *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                        match t3_1 {
                          Some(e) => {
                            *((base + 12) as *mut u8) = (1i32) as u8;
                            *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          None => {
                            {
                              *((base + 12) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };},
                        WitNode::EnumValue(e) => {
                          *((base + 0) as *mut u8) = (2i32) as u8;
                          *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                        },
                        WitNode::FlagsValue(e) => {
                          *((base + 0) as *mut u8) = (3i32) as u8;
                          let vec4 = e;
                          let len4 = vec4.len() as i32;
                          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                          let result4 = if layout4.size() != 0
                          {
                            let ptr = alloc::alloc(layout4);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout4);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4 as i32 + (i as i32) * 1;
                            {
                              *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                            }
                          }
                          *((base + 12) as *mut i32) = len4;
                          *((base + 8) as *mut i32) = result4 as i32;
                          cleanup_list.extend_from_slice(&[(result4, layout4),]);
                        },
                        WitNode::TupleValue(e) => {
                          *((base + 0) as *mut u8) = (4i32) as u8;
                          let vec5 = e;
                          let ptr5 = vec5.as_ptr() as i32;
                          let len5 = vec5.len() as i32;
                          *((base + 12) as *mut i32) = len5;
                          *((base + 8) as *mut i32) = ptr5;
                        },
                        WitNode::ListValue(e) => {
                          *((base + 0) as *mut u8) = (5i32) as u8;
                          let vec6 = e;
                          let ptr6 = vec6.as_ptr() as i32;
                          let len6 = vec6.len() as i32;
                          *((base + 12) as *mut i32) = len6;
                          *((base + 8) as *mut i32) = ptr6;
                        },
                        WitNode::OptionValue(e) => {
                          *((base + 0) as *mut u8) = (6i32) as u8;
                          match e {
                            Some(e) => {
                              *((base + 8) as *mut u8) = (1i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            },
                            None => {
                              {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                              }
                            },
                          };},
                          WitNode::ResultValue(e) => {
                            *((base + 0) as *mut u8) = (7i32) as u8;
                            match e {
                              Ok(e) => { {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                                match e {
                                  Some(e) => {
                                    *((base + 12) as *mut u8) = (1i32) as u8;
                                    *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  None => {
                                    {
                                      *((base + 12) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };} },
                                Err(e) => { {
                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                  match e {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };} },
                                };},
                                WitNode::PrimU8(e) => {
                                  *((base + 0) as *mut u8) = (8i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimU16(e) => {
                                  *((base + 0) as *mut u8) = (9i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimU32(e) => {
                                  *((base + 0) as *mut u8) = (10i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimU64(e) => {
                                  *((base + 0) as *mut u8) = (11i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimS8(e) => {
                                  *((base + 0) as *mut u8) = (12i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimS16(e) => {
                                  *((base + 0) as *mut u8) = (13i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimS32(e) => {
                                  *((base + 0) as *mut u8) = (14i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimS64(e) => {
                                  *((base + 0) as *mut u8) = (15i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimFloat32(e) => {
                                  *((base + 0) as *mut u8) = (16i32) as u8;
                                  *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                },
                                WitNode::PrimFloat64(e) => {
                                  *((base + 0) as *mut u8) = (17i32) as u8;
                                  *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                },
                                WitNode::PrimChar(e) => {
                                  *((base + 0) as *mut u8) = (18i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimBool(e) => {
                                  *((base + 0) as *mut u8) = (19i32) as u8;
                                  *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                },
                                WitNode::PrimString(e) => {
                                  *((base + 0) as *mut u8) = (20i32) as u8;
                                  let vec7 = e;
                                  let ptr7 = vec7.as_ptr() as i32;
                                  let len7 = vec7.len() as i32;
                                  *((base + 12) as *mut i32) = len7;
                                  *((base + 8) as *mut i32) = ptr7;
                                },
                                WitNode::Handle(e) => {
                                  *((base + 0) as *mut u8) = (21i32) as u8;
                                  let (t8_0, t8_1, ) = e;
                                  let Uri{ value:value9, } = t8_0;
                                  let vec10 = value9;
                                  let ptr10 = vec10.as_ptr() as i32;
                                  let len10 = vec10.len() as i32;
                                  *((base + 12) as *mut i32) = len10;
                                  *((base + 8) as *mut i32) = ptr10;
                                  *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                },
                              }
                            }
                          }
                          *((base + 4) as *mut i32) = len11;
                          *((base + 0) as *mut i32) = result11 as i32;
                          cleanup_list.extend_from_slice(&[(result11, layout11),]);
                        }
                      }
                      let ptr13 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                      extern "C" {
                        #[link_name = "[method]wasm-rpc.invoke-and-await"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                      let l14 = i32::from(*((ptr13 + 0) as *const u8));
                      if layout12.size() != 0 {
                        alloc::dealloc(result12, layout12);
                      }
                      for (ptr, layout) in cleanup_list {
                        
                        if layout.size() != 0 {
                          
                          alloc::dealloc(ptr, layout);
                          
                        }
                        
                      }
                      match l14 {
                        0 => {
                          let e = {
                            let l15 = *((ptr13 + 4) as *const i32);
                            let l16 = *((ptr13 + 8) as *const i32);
                            let base62 = l15;
                            let len62 = l16;
                            let mut result62 = Vec::with_capacity(len62 as usize);
                            for i in 0..len62 {
                              let base = base62 + i * 24;
                              let e62 = {
                                let l17 = i32::from(*((base + 0) as *const u8));
                                let v61 = match l17 {
                                  0 => {
                                    let e61 = {
                                      let l18 = *((base + 8) as *const i32);
                                      let l19 = *((base + 12) as *const i32);
                                      let len20 = l19 as usize;
                                      
                                      Vec::from_raw_parts(l18 as *mut _, len20, len20)
                                    };
                                    WitNode::RecordValue(e61)
                                  }
                                  1 => {
                                    let e61 = {
                                      let l21 = *((base + 8) as *const i32);
                                      let l22 = i32::from(*((base + 12) as *const u8));
                                      
                                      (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *((base + 16) as *const i32);
                                            
                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      })
                                    };
                                    WitNode::VariantValue(e61)
                                  }
                                  2 => {
                                    let e61 = {
                                      let l24 = *((base + 8) as *const i32);
                                      
                                      l24 as u32
                                    };
                                    WitNode::EnumValue(e61)
                                  }
                                  3 => {
                                    let e61 = {
                                      let l25 = *((base + 8) as *const i32);
                                      let l26 = *((base + 12) as *const i32);
                                      let base28 = l25;
                                      let len28 = l26;
                                      let mut result28 = Vec::with_capacity(len28 as usize);
                                      for i in 0..len28 {
                                        let base = base28 + i * 1;
                                        let e28 = {
                                          let l27 = i32::from(*((base + 0) as *const u8));
                                          
                                          wit_bindgen::rt::bool_lift(l27 as u8)
                                        };
                                        result28.push(e28);
                                      }
                                      wit_bindgen::rt::dealloc(base28, (len28 as usize) * 1, 1);
                                      
                                      result28
                                    };
                                    WitNode::FlagsValue(e61)
                                  }
                                  4 => {
                                    let e61 = {
                                      let l29 = *((base + 8) as *const i32);
                                      let l30 = *((base + 12) as *const i32);
                                      let len31 = l30 as usize;
                                      
                                      Vec::from_raw_parts(l29 as *mut _, len31, len31)
                                    };
                                    WitNode::TupleValue(e61)
                                  }
                                  5 => {
                                    let e61 = {
                                      let l32 = *((base + 8) as *const i32);
                                      let l33 = *((base + 12) as *const i32);
                                      let len34 = l33 as usize;
                                      
                                      Vec::from_raw_parts(l32 as *mut _, len34, len34)
                                    };
                                    WitNode::ListValue(e61)
                                  }
                                  6 => {
                                    let e61 = {
                                      let l35 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l35 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l36 = *((base + 12) as *const i32);
                                            
                                            l36
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::OptionValue(e61)
                                  }
                                  7 => {
                                    let e61 = {
                                      let l37 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l37 {
                                        0 => {
                                          let e = {
                                            let l38 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *((base + 16) as *const i32);
                                                  
                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l40 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *((base + 16) as *const i32);
                                                  
                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::ResultValue(e61)
                                  }
                                  8 => {
                                    let e61 = {
                                      let l42 = i32::from(*((base + 8) as *const u8));
                                      
                                      l42 as u8
                                    };
                                    WitNode::PrimU8(e61)
                                  }
                                  9 => {
                                    let e61 = {
                                      let l43 = i32::from(*((base + 8) as *const u16));
                                      
                                      l43 as u16
                                    };
                                    WitNode::PrimU16(e61)
                                  }
                                  10 => {
                                    let e61 = {
                                      let l44 = *((base + 8) as *const i32);
                                      
                                      l44 as u32
                                    };
                                    WitNode::PrimU32(e61)
                                  }
                                  11 => {
                                    let e61 = {
                                      let l45 = *((base + 8) as *const i64);
                                      
                                      l45 as u64
                                    };
                                    WitNode::PrimU64(e61)
                                  }
                                  12 => {
                                    let e61 = {
                                      let l46 = i32::from(*((base + 8) as *const i8));
                                      
                                      l46 as i8
                                    };
                                    WitNode::PrimS8(e61)
                                  }
                                  13 => {
                                    let e61 = {
                                      let l47 = i32::from(*((base + 8) as *const i16));
                                      
                                      l47 as i16
                                    };
                                    WitNode::PrimS16(e61)
                                  }
                                  14 => {
                                    let e61 = {
                                      let l48 = *((base + 8) as *const i32);
                                      
                                      l48
                                    };
                                    WitNode::PrimS32(e61)
                                  }
                                  15 => {
                                    let e61 = {
                                      let l49 = *((base + 8) as *const i64);
                                      
                                      l49
                                    };
                                    WitNode::PrimS64(e61)
                                  }
                                  16 => {
                                    let e61 = {
                                      let l50 = *((base + 8) as *const f32);
                                      
                                      l50
                                    };
                                    WitNode::PrimFloat32(e61)
                                  }
                                  17 => {
                                    let e61 = {
                                      let l51 = *((base + 8) as *const f64);
                                      
                                      l51
                                    };
                                    WitNode::PrimFloat64(e61)
                                  }
                                  18 => {
                                    let e61 = {
                                      let l52 = *((base + 8) as *const i32);
                                      
                                      wit_bindgen::rt::char_lift(l52 as u32)
                                    };
                                    WitNode::PrimChar(e61)
                                  }
                                  19 => {
                                    let e61 = {
                                      let l53 = i32::from(*((base + 8) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l53 as u8)
                                    };
                                    WitNode::PrimBool(e61)
                                  }
                                  20 => {
                                    let e61 = {
                                      let l54 = *((base + 8) as *const i32);
                                      let l55 = *((base + 12) as *const i32);
                                      let len56 = l55 as usize;
                                      let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                                      
                                      wit_bindgen::rt::string_lift(bytes56)
                                    };
                                    WitNode::PrimString(e61)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e61 = {
                                      let l57 = *((base + 8) as *const i32);
                                      let l58 = *((base + 12) as *const i32);
                                      let len59 = l58 as usize;
                                      let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                      let l60 = *((base + 16) as *const i64);
                                      
                                      (Uri{
                                        value: wit_bindgen::rt::string_lift(bytes59),
                                      }, l60 as u64)
                                    };
                                    WitNode::Handle(e61)
                                  }
                                };
                                
                                v61
                              };
                              result62.push(e62);
                            }
                            wit_bindgen::rt::dealloc(base62, (len62 as usize) * 24, 8);
                            
                            WitValue{
                              nodes: result62,
                            }
                          };
                          Ok(e)
                        }
                        1 => {
                          let e = {
                            let l63 = i32::from(*((ptr13 + 4) as *const u8));
                            let v76 = match l63 {
                              0 => {
                                let e76 = {
                                  let l64 = *((ptr13 + 8) as *const i32);
                                  let l65 = *((ptr13 + 12) as *const i32);
                                  let len66 = l65 as usize;
                                  let bytes66 = Vec::from_raw_parts(l64 as *mut _, len66, len66);
                                  
                                  wit_bindgen::rt::string_lift(bytes66)
                                };
                                RpcError::ProtocolError(e76)
                              }
                              1 => {
                                let e76 = {
                                  let l67 = *((ptr13 + 8) as *const i32);
                                  let l68 = *((ptr13 + 12) as *const i32);
                                  let len69 = l68 as usize;
                                  let bytes69 = Vec::from_raw_parts(l67 as *mut _, len69, len69);
                                  
                                  wit_bindgen::rt::string_lift(bytes69)
                                };
                                RpcError::Denied(e76)
                              }
                              2 => {
                                let e76 = {
                                  let l70 = *((ptr13 + 8) as *const i32);
                                  let l71 = *((ptr13 + 12) as *const i32);
                                  let len72 = l71 as usize;
                                  let bytes72 = Vec::from_raw_parts(l70 as *mut _, len72, len72);
                                  
                                  wit_bindgen::rt::string_lift(bytes72)
                                };
                                RpcError::NotFound(e76)
                              }
                              n => {
                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                let e76 = {
                                  let l73 = *((ptr13 + 8) as *const i32);
                                  let l74 = *((ptr13 + 12) as *const i32);
                                  let len75 = l74 as usize;
                                  let bytes75 = Vec::from_raw_parts(l73 as *mut _, len75, len75);
                                  
                                  wit_bindgen::rt::string_lift(bytes75)
                                };
                                RpcError::RemoteInternalError(e76)
                              }
                            };
                            
                            v76
                          };
                          Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                      }
                    }
                  }
                }
                impl WasmRpc {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn invoke(&self,function_name: &str,function_params: &[WitValue],) -> Result<(),RpcError>{
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      let mut cleanup_list = Vec::new();
                      
                      #[repr(align(4))]
                      struct RetArea([u8; 16]);
                      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                      let vec0 = function_name;
                      let ptr0 = vec0.as_ptr() as i32;
                      let len0 = vec0.len() as i32;
                      let vec12 = function_params;
                      let len12 = vec12.len() as i32;
                      let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                      let result12 = if layout12.size() != 0
                      {
                        let ptr = alloc::alloc(layout12);
                        if ptr.is_null()
                        {
                          alloc::handle_alloc_error(layout12);
                        }
                        ptr
                      }else {{
                        ::core::ptr::null_mut()
                      }};
                      for (i, e) in vec12.into_iter().enumerate() {
                        let base = result12 as i32 + (i as i32) * 8;
                        {
                          let WitValue{ nodes:nodes1, } = e;
                          let vec11 = nodes1;
                          let len11 = vec11.len() as i32;
                          let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                          let result11 = if layout11.size() != 0
                          {
                            let ptr = alloc::alloc(layout11);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout11);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec11.into_iter().enumerate() {
                            let base = result11 as i32 + (i as i32) * 24;
                            {
                              match e {
                                WitNode::RecordValue(e) => {
                                  *((base + 0) as *mut u8) = (0i32) as u8;
                                  let vec2 = e;
                                  let ptr2 = vec2.as_ptr() as i32;
                                  let len2 = vec2.len() as i32;
                                  *((base + 12) as *mut i32) = len2;
                                  *((base + 8) as *mut i32) = ptr2;
                                },
                                WitNode::VariantValue(e) => {
                                  *((base + 0) as *mut u8) = (1i32) as u8;
                                  let (t3_0, t3_1, ) = e;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                                  match t3_1 {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };},
                                  WitNode::EnumValue(e) => {
                                    *((base + 0) as *mut u8) = (2i32) as u8;
                                    *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  WitNode::FlagsValue(e) => {
                                    *((base + 0) as *mut u8) = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len() as i32;
                                    let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                                    let result4 = if layout4.size() != 0
                                    {
                                      let ptr = alloc::alloc(layout4);
                                      if ptr.is_null()
                                      {
                                        alloc::handle_alloc_error(layout4);
                                      }
                                      ptr
                                    }else {{
                                      ::core::ptr::null_mut()
                                    }};
                                    for (i, e) in vec4.into_iter().enumerate() {
                                      let base = result4 as i32 + (i as i32) * 1;
                                      {
                                        *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                      }
                                    }
                                    *((base + 12) as *mut i32) = len4;
                                    *((base + 8) as *mut i32) = result4 as i32;
                                    cleanup_list.extend_from_slice(&[(result4, layout4),]);
                                  },
                                  WitNode::TupleValue(e) => {
                                    *((base + 0) as *mut u8) = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr() as i32;
                                    let len5 = vec5.len() as i32;
                                    *((base + 12) as *mut i32) = len5;
                                    *((base + 8) as *mut i32) = ptr5;
                                  },
                                  WitNode::ListValue(e) => {
                                    *((base + 0) as *mut u8) = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr() as i32;
                                    let len6 = vec6.len() as i32;
                                    *((base + 12) as *mut i32) = len6;
                                    *((base + 8) as *mut i32) = ptr6;
                                  },
                                  WitNode::OptionValue(e) => {
                                    *((base + 0) as *mut u8) = (6i32) as u8;
                                    match e {
                                      Some(e) => {
                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                        *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                      },
                                      None => {
                                        {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                        }
                                      },
                                    };},
                                    WitNode::ResultValue(e) => {
                                      *((base + 0) as *mut u8) = (7i32) as u8;
                                      match e {
                                        Ok(e) => { {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                          match e {
                                            Some(e) => {
                                              *((base + 12) as *mut u8) = (1i32) as u8;
                                              *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                            },
                                            None => {
                                              {
                                                *((base + 12) as *mut u8) = (0i32) as u8;
                                              }
                                            },
                                          };} },
                                          Err(e) => { {
                                            *((base + 8) as *mut u8) = (1i32) as u8;
                                            match e {
                                              Some(e) => {
                                                *((base + 12) as *mut u8) = (1i32) as u8;
                                                *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                              },
                                              None => {
                                                {
                                                  *((base + 12) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };} },
                                          };},
                                          WitNode::PrimU8(e) => {
                                            *((base + 0) as *mut u8) = (8i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimU16(e) => {
                                            *((base + 0) as *mut u8) = (9i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimU32(e) => {
                                            *((base + 0) as *mut u8) = (10i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimU64(e) => {
                                            *((base + 0) as *mut u8) = (11i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimS8(e) => {
                                            *((base + 0) as *mut u8) = (12i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimS16(e) => {
                                            *((base + 0) as *mut u8) = (13i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimS32(e) => {
                                            *((base + 0) as *mut u8) = (14i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimS64(e) => {
                                            *((base + 0) as *mut u8) = (15i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimFloat32(e) => {
                                            *((base + 0) as *mut u8) = (16i32) as u8;
                                            *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                          },
                                          WitNode::PrimFloat64(e) => {
                                            *((base + 0) as *mut u8) = (17i32) as u8;
                                            *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                          },
                                          WitNode::PrimChar(e) => {
                                            *((base + 0) as *mut u8) = (18i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimBool(e) => {
                                            *((base + 0) as *mut u8) = (19i32) as u8;
                                            *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                          },
                                          WitNode::PrimString(e) => {
                                            *((base + 0) as *mut u8) = (20i32) as u8;
                                            let vec7 = e;
                                            let ptr7 = vec7.as_ptr() as i32;
                                            let len7 = vec7.len() as i32;
                                            *((base + 12) as *mut i32) = len7;
                                            *((base + 8) as *mut i32) = ptr7;
                                          },
                                          WitNode::Handle(e) => {
                                            *((base + 0) as *mut u8) = (21i32) as u8;
                                            let (t8_0, t8_1, ) = e;
                                            let Uri{ value:value9, } = t8_0;
                                            let vec10 = value9;
                                            let ptr10 = vec10.as_ptr() as i32;
                                            let len10 = vec10.len() as i32;
                                            *((base + 12) as *mut i32) = len10;
                                            *((base + 8) as *mut i32) = ptr10;
                                            *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                          },
                                        }
                                      }
                                    }
                                    *((base + 4) as *mut i32) = len11;
                                    *((base + 0) as *mut i32) = result11 as i32;
                                    cleanup_list.extend_from_slice(&[(result11, layout11),]);
                                  }
                                }
                                let ptr13 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                                extern "C" {
                                  #[link_name = "[method]wasm-rpc.invoke"]
                                  fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                                let l14 = i32::from(*((ptr13 + 0) as *const u8));
                                if layout12.size() != 0 {
                                  alloc::dealloc(result12, layout12);
                                }
                                for (ptr, layout) in cleanup_list {
                                  
                                  if layout.size() != 0 {
                                    
                                    alloc::dealloc(ptr, layout);
                                    
                                  }
                                  
                                }
                                match l14 {
                                  0 => {
                                    let e = ();
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l15 = i32::from(*((ptr13 + 4) as *const u8));
                                      let v28 = match l15 {
                                        0 => {
                                          let e28 = {
                                            let l16 = *((ptr13 + 8) as *const i32);
                                            let l17 = *((ptr13 + 12) as *const i32);
                                            let len18 = l17 as usize;
                                            let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                            
                                            wit_bindgen::rt::string_lift(bytes18)
                                          };
                                          RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                          let e28 = {
                                            let l19 = *((ptr13 + 8) as *const i32);
                                            let l20 = *((ptr13 + 12) as *const i32);
                                            let len21 = l20 as usize;
                                            let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                                            
                                            wit_bindgen::rt::string_lift(bytes21)
                                          };
                                          RpcError::Denied(e28)
                                        }
                                        2 => {
                                          let e28 = {
                                            let l22 = *((ptr13 + 8) as *const i32);
                                            let l23 = *((ptr13 + 12) as *const i32);
                                            let len24 = l23 as usize;
                                            let bytes24 = Vec::from_raw_parts(l22 as *mut _, len24, len24);
                                            
                                            wit_bindgen::rt::string_lift(bytes24)
                                          };
                                          RpcError::NotFound(e28)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                                          let e28 = {
                                            let l25 = *((ptr13 + 8) as *const i32);
                                            let l26 = *((ptr13 + 12) as *const i32);
                                            let len27 = l26 as usize;
                                            let bytes27 = Vec::from_raw_parts(l25 as *mut _, len27, len27);
                                            
                                            wit_bindgen::rt::string_lift(bytes27)
                                          };
                                          RpcError::RemoteInternalError(e28)
                                        }
                                      };
                                      
                                      v28
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          
                        }
                        
                      }
                    }
                    pub mod sputnik {
                      pub mod accountant {
                        
                        #[allow(clippy::all)]
                        pub mod api {
                          #[used]
                          #[doc(hidden)]
                          #[cfg(target_arch = "wasm32")]
                          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                          pub type MatchingEngineError = super::super::super::sputnik::matching_engine::api::Error;
                          pub type EngineStatus = super::super::super::sputnik::matching_engine::api::OrderStatus;
                          pub type Asset = super::super::super::sputnik::registry::api::Asset;
                          pub type Side = super::super::super::sputnik::matching_engine::api::Side;
                          pub type Fill = super::super::super::sputnik::matching_engine::api::Fill;
                          #[derive(Clone, Copy)]
                          pub enum Error{
                            DuplicateId(u64),
                            InsufficientFunds(u64),
                            AlreadyInitialized(u64),
                            NotInitialized,
                            InvalidAsset(u64),
                            InvalidSpotPair(u64),
                            MatchingEngineError(MatchingEngineError),
                          }
                          impl ::core::fmt::Debug for Error {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                Error::DuplicateId(e) => {
                                  f.debug_tuple("Error::DuplicateId").field(e).finish()
                                }
                                Error::InsufficientFunds(e) => {
                                  f.debug_tuple("Error::InsufficientFunds").field(e).finish()
                                }
                                Error::AlreadyInitialized(e) => {
                                  f.debug_tuple("Error::AlreadyInitialized").field(e).finish()
                                }
                                Error::NotInitialized => {
                                  f.debug_tuple("Error::NotInitialized").finish()
                                }
                                Error::InvalidAsset(e) => {
                                  f.debug_tuple("Error::InvalidAsset").field(e).finish()
                                }
                                Error::InvalidSpotPair(e) => {
                                  f.debug_tuple("Error::InvalidSpotPair").field(e).finish()
                                }
                                Error::MatchingEngineError(e) => {
                                  f.debug_tuple("Error::MatchingEngineError").field(e).finish()
                                }
                              }
                            }
                          }
                          impl ::core::fmt::Display for Error {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              write!(f, "{:?}", self)
                            }
                          }
                          
                          impl std::error::Error for Error {}
                          #[derive(Clone)]
                          pub struct AssetBalance {
                            pub asset: Asset,
                            pub balance: u64,
                            pub available_balance: u64,
                          }
                          impl ::core::fmt::Debug for AssetBalance {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("AssetBalance").field("asset", &self.asset).field("balance", &self.balance).field("available-balance", &self.available_balance).finish()
                            }
                          }
                          #[repr(C)]
                          #[derive(Clone, Copy)]
                          pub struct Order {
                            pub id: u64,
                            pub spot_pair: u64,
                            pub timestamp: u64,
                            pub side: Side,
                            pub price: u64,
                            pub size: u64,
                          }
                          impl ::core::fmt::Debug for Order {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Order").field("id", &self.id).field("spot-pair", &self.spot_pair).field("timestamp", &self.timestamp).field("side", &self.side).field("price", &self.price).field("size", &self.size).finish()
                            }
                          }
                          #[repr(C)]
                          #[derive(Clone, Copy)]
                          pub struct OrderStatus {
                            pub id: u64,
                          }
                          impl ::core::fmt::Debug for OrderStatus {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("OrderStatus").field("id", &self.id).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct OrderAndStatus {
                            pub order: Order,
                            pub status: EngineStatus,
                          }
                          impl ::core::fmt::Debug for OrderAndStatus {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("OrderAndStatus").field("order", &self.order).field("status", &self.status).finish()
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn initialize(id: u64,matching_engine_component_id: &str,registry_component_id: &str,environment: &str,) -> Result<u64,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 32]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let vec0 = matching_engine_component_id;
                              let ptr0 = vec0.as_ptr() as i32;
                              let len0 = vec0.len() as i32;
                              let vec1 = registry_component_id;
                              let ptr1 = vec1.as_ptr() as i32;
                              let len1 = vec1.len() as i32;
                              let vec2 = environment;
                              let ptr2 = vec2.as_ptr() as i32;
                              let len2 = vec2.len() as i32;
                              let ptr3 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:accountant/api")]
                              extern "C" {
                                #[link_name = "initialize"]
                                fn wit_import(_: i64, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id), ptr0, len0, ptr1, len1, ptr2, len2, ptr3);
                              let l4 = i32::from(*((ptr3 + 0) as *const u8));
                              match l4 {
                                0 => {
                                  let e = {
                                    let l5 = *((ptr3 + 8) as *const i64);
                                    
                                    l5 as u64
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l6 = i32::from(*((ptr3 + 8) as *const u8));
                                    let v16 = match l6 {
                                      0 => {
                                        let e16 = {
                                          let l7 = *((ptr3 + 16) as *const i64);
                                          
                                          l7 as u64
                                        };
                                        Error::DuplicateId(e16)
                                      }
                                      1 => {
                                        let e16 = {
                                          let l8 = *((ptr3 + 16) as *const i64);
                                          
                                          l8 as u64
                                        };
                                        Error::InsufficientFunds(e16)
                                      }
                                      2 => {
                                        let e16 = {
                                          let l9 = *((ptr3 + 16) as *const i64);
                                          
                                          l9 as u64
                                        };
                                        Error::AlreadyInitialized(e16)
                                      }
                                      3 => {
                                        Error::NotInitialized
                                      }
                                      4 => {
                                        let e16 = {
                                          let l10 = *((ptr3 + 16) as *const i64);
                                          
                                          l10 as u64
                                        };
                                        Error::InvalidAsset(e16)
                                      }
                                      5 => {
                                        let e16 = {
                                          let l11 = *((ptr3 + 16) as *const i64);
                                          
                                          l11 as u64
                                        };
                                        Error::InvalidSpotPair(e16)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 6, "invalid enum discriminant");
                                        let e16 = {
                                          let l12 = i32::from(*((ptr3 + 16) as *const u8));
                                          use super::super::super::sputnik::matching_engine::api::Error as V15;
                                          let v15 = match l12 {
                                            0 => {
                                              let e15 = {
                                                let l13 = *((ptr3 + 24) as *const i64);
                                                
                                                l13 as u64
                                              };
                                              V15::DuplicateId(e15)
                                            }
                                            1 => {
                                              let e15 = {
                                                let l14 = *((ptr3 + 24) as *const i64);
                                                
                                                l14 as u64
                                              };
                                              V15::MissingOrder(e15)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 2, "invalid enum discriminant");
                                              V15::AlreadyIntialized
                                            }
                                          };
                                          
                                          v15
                                        };
                                        Error::MatchingEngineError(e16)
                                      }
                                    };
                                    
                                    v16
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn get_balances() -> wit_bindgen::rt::vec::Vec::<AssetBalance>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 8]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:accountant/api")]
                              extern "C" {
                                #[link_name = "get-balances"]
                                fn wit_import(_: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, ){ unreachable!() }
                              wit_import(ptr0);
                              let l1 = *((ptr0 + 0) as *const i32);
                              let l2 = *((ptr0 + 4) as *const i32);
                              let base10 = l1;
                              let len10 = l2;
                              let mut result10 = Vec::with_capacity(len10 as usize);
                              for i in 0..len10 {
                                let base = base10 + i * 40;
                                let e10 = {
                                  let l3 = *((base + 0) as *const i64);
                                  let l4 = *((base + 8) as *const i32);
                                  let l5 = *((base + 12) as *const i32);
                                  let len6 = l5 as usize;
                                  let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                                  let l7 = i32::from(*((base + 16) as *const u8));
                                  let l8 = *((base + 24) as *const i64);
                                  let l9 = *((base + 32) as *const i64);
                                  
                                  AssetBalance{
                                    asset: super::super::super::sputnik::registry::api::Asset{
                                      id: l3 as u64,
                                      name: wit_bindgen::rt::string_lift(bytes6),
                                      decimals: l7 as u8,
                                    },
                                    balance: l8 as u64,
                                    available_balance: l9 as u64,
                                  }
                                };
                                result10.push(e10);
                              }
                              wit_bindgen::rt::dealloc(base10, (len10 as usize) * 40, 8);
                              result10
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn place_order(order: Order,) -> Result<OrderStatus,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 32]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let Order{ id:id0, spot_pair:spot_pair0, timestamp:timestamp0, side:side0, price:price0, size:size0, } = order;
                              let ptr1 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:accountant/api")]
                              extern "C" {
                                #[link_name = "place-order"]
                                fn wit_import(_: i64, _: i64, _: i64, _: i32, _: i64, _: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i64, _: i64, _: i32, _: i64, _: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id0), wit_bindgen::rt::as_i64(spot_pair0), wit_bindgen::rt::as_i64(timestamp0), side0.clone() as i32, wit_bindgen::rt::as_i64(price0), wit_bindgen::rt::as_i64(size0), ptr1);
                              let l2 = i32::from(*((ptr1 + 0) as *const u8));
                              match l2 {
                                0 => {
                                  let e = {
                                    let l3 = *((ptr1 + 8) as *const i64);
                                    
                                    OrderStatus{
                                      id: l3 as u64,
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l4 = i32::from(*((ptr1 + 8) as *const u8));
                                    let v14 = match l4 {
                                      0 => {
                                        let e14 = {
                                          let l5 = *((ptr1 + 16) as *const i64);
                                          
                                          l5 as u64
                                        };
                                        Error::DuplicateId(e14)
                                      }
                                      1 => {
                                        let e14 = {
                                          let l6 = *((ptr1 + 16) as *const i64);
                                          
                                          l6 as u64
                                        };
                                        Error::InsufficientFunds(e14)
                                      }
                                      2 => {
                                        let e14 = {
                                          let l7 = *((ptr1 + 16) as *const i64);
                                          
                                          l7 as u64
                                        };
                                        Error::AlreadyInitialized(e14)
                                      }
                                      3 => {
                                        Error::NotInitialized
                                      }
                                      4 => {
                                        let e14 = {
                                          let l8 = *((ptr1 + 16) as *const i64);
                                          
                                          l8 as u64
                                        };
                                        Error::InvalidAsset(e14)
                                      }
                                      5 => {
                                        let e14 = {
                                          let l9 = *((ptr1 + 16) as *const i64);
                                          
                                          l9 as u64
                                        };
                                        Error::InvalidSpotPair(e14)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 6, "invalid enum discriminant");
                                        let e14 = {
                                          let l10 = i32::from(*((ptr1 + 16) as *const u8));
                                          use super::super::super::sputnik::matching_engine::api::Error as V13;
                                          let v13 = match l10 {
                                            0 => {
                                              let e13 = {
                                                let l11 = *((ptr1 + 24) as *const i64);
                                                
                                                l11 as u64
                                              };
                                              V13::DuplicateId(e13)
                                            }
                                            1 => {
                                              let e13 = {
                                                let l12 = *((ptr1 + 24) as *const i64);
                                                
                                                l12 as u64
                                              };
                                              V13::MissingOrder(e13)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 2, "invalid enum discriminant");
                                              V13::AlreadyIntialized
                                            }
                                          };
                                          
                                          v13
                                        };
                                        Error::MatchingEngineError(e14)
                                      }
                                    };
                                    
                                    v14
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn deposit(asset: u64,amount: u64,) -> Result<AssetBalance,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 48]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:accountant/api")]
                              extern "C" {
                                #[link_name = "deposit"]
                                fn wit_import(_: i64, _: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(asset), wit_bindgen::rt::as_i64(amount), ptr0);
                              let l1 = i32::from(*((ptr0 + 0) as *const u8));
                              match l1 {
                                0 => {
                                  let e = {
                                    let l2 = *((ptr0 + 8) as *const i64);
                                    let l3 = *((ptr0 + 16) as *const i32);
                                    let l4 = *((ptr0 + 20) as *const i32);
                                    let len5 = l4 as usize;
                                    let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                                    let l6 = i32::from(*((ptr0 + 24) as *const u8));
                                    let l7 = *((ptr0 + 32) as *const i64);
                                    let l8 = *((ptr0 + 40) as *const i64);
                                    
                                    AssetBalance{
                                      asset: super::super::super::sputnik::registry::api::Asset{
                                        id: l2 as u64,
                                        name: wit_bindgen::rt::string_lift(bytes5),
                                        decimals: l6 as u8,
                                      },
                                      balance: l7 as u64,
                                      available_balance: l8 as u64,
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l9 = i32::from(*((ptr0 + 8) as *const u8));
                                    let v19 = match l9 {
                                      0 => {
                                        let e19 = {
                                          let l10 = *((ptr0 + 16) as *const i64);
                                          
                                          l10 as u64
                                        };
                                        Error::DuplicateId(e19)
                                      }
                                      1 => {
                                        let e19 = {
                                          let l11 = *((ptr0 + 16) as *const i64);
                                          
                                          l11 as u64
                                        };
                                        Error::InsufficientFunds(e19)
                                      }
                                      2 => {
                                        let e19 = {
                                          let l12 = *((ptr0 + 16) as *const i64);
                                          
                                          l12 as u64
                                        };
                                        Error::AlreadyInitialized(e19)
                                      }
                                      3 => {
                                        Error::NotInitialized
                                      }
                                      4 => {
                                        let e19 = {
                                          let l13 = *((ptr0 + 16) as *const i64);
                                          
                                          l13 as u64
                                        };
                                        Error::InvalidAsset(e19)
                                      }
                                      5 => {
                                        let e19 = {
                                          let l14 = *((ptr0 + 16) as *const i64);
                                          
                                          l14 as u64
                                        };
                                        Error::InvalidSpotPair(e19)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 6, "invalid enum discriminant");
                                        let e19 = {
                                          let l15 = i32::from(*((ptr0 + 16) as *const u8));
                                          use super::super::super::sputnik::matching_engine::api::Error as V18;
                                          let v18 = match l15 {
                                            0 => {
                                              let e18 = {
                                                let l16 = *((ptr0 + 24) as *const i64);
                                                
                                                l16 as u64
                                              };
                                              V18::DuplicateId(e18)
                                            }
                                            1 => {
                                              let e18 = {
                                                let l17 = *((ptr0 + 24) as *const i64);
                                                
                                                l17 as u64
                                              };
                                              V18::MissingOrder(e18)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 2, "invalid enum discriminant");
                                              V18::AlreadyIntialized
                                            }
                                          };
                                          
                                          v18
                                        };
                                        Error::MatchingEngineError(e19)
                                      }
                                    };
                                    
                                    v19
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn withdraw(asset: u64,amount: u64,) -> Result<AssetBalance,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 48]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:accountant/api")]
                              extern "C" {
                                #[link_name = "withdraw"]
                                fn wit_import(_: i64, _: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(asset), wit_bindgen::rt::as_i64(amount), ptr0);
                              let l1 = i32::from(*((ptr0 + 0) as *const u8));
                              match l1 {
                                0 => {
                                  let e = {
                                    let l2 = *((ptr0 + 8) as *const i64);
                                    let l3 = *((ptr0 + 16) as *const i32);
                                    let l4 = *((ptr0 + 20) as *const i32);
                                    let len5 = l4 as usize;
                                    let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                                    let l6 = i32::from(*((ptr0 + 24) as *const u8));
                                    let l7 = *((ptr0 + 32) as *const i64);
                                    let l8 = *((ptr0 + 40) as *const i64);
                                    
                                    AssetBalance{
                                      asset: super::super::super::sputnik::registry::api::Asset{
                                        id: l2 as u64,
                                        name: wit_bindgen::rt::string_lift(bytes5),
                                        decimals: l6 as u8,
                                      },
                                      balance: l7 as u64,
                                      available_balance: l8 as u64,
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l9 = i32::from(*((ptr0 + 8) as *const u8));
                                    let v19 = match l9 {
                                      0 => {
                                        let e19 = {
                                          let l10 = *((ptr0 + 16) as *const i64);
                                          
                                          l10 as u64
                                        };
                                        Error::DuplicateId(e19)
                                      }
                                      1 => {
                                        let e19 = {
                                          let l11 = *((ptr0 + 16) as *const i64);
                                          
                                          l11 as u64
                                        };
                                        Error::InsufficientFunds(e19)
                                      }
                                      2 => {
                                        let e19 = {
                                          let l12 = *((ptr0 + 16) as *const i64);
                                          
                                          l12 as u64
                                        };
                                        Error::AlreadyInitialized(e19)
                                      }
                                      3 => {
                                        Error::NotInitialized
                                      }
                                      4 => {
                                        let e19 = {
                                          let l13 = *((ptr0 + 16) as *const i64);
                                          
                                          l13 as u64
                                        };
                                        Error::InvalidAsset(e19)
                                      }
                                      5 => {
                                        let e19 = {
                                          let l14 = *((ptr0 + 16) as *const i64);
                                          
                                          l14 as u64
                                        };
                                        Error::InvalidSpotPair(e19)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 6, "invalid enum discriminant");
                                        let e19 = {
                                          let l15 = i32::from(*((ptr0 + 16) as *const u8));
                                          use super::super::super::sputnik::matching_engine::api::Error as V18;
                                          let v18 = match l15 {
                                            0 => {
                                              let e18 = {
                                                let l16 = *((ptr0 + 24) as *const i64);
                                                
                                                l16 as u64
                                              };
                                              V18::DuplicateId(e18)
                                            }
                                            1 => {
                                              let e18 = {
                                                let l17 = *((ptr0 + 24) as *const i64);
                                                
                                                l17 as u64
                                              };
                                              V18::MissingOrder(e18)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 2, "invalid enum discriminant");
                                              V18::AlreadyIntialized
                                            }
                                          };
                                          
                                          v18
                                        };
                                        Error::MatchingEngineError(e19)
                                      }
                                    };
                                    
                                    v19
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn process_maker_fill(fill: Fill,){
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              let super::super::super::sputnik::matching_engine::api::Fill{ price:price0, size:size0, taker_order_id:taker_order_id0, maker_order_id:maker_order_id0, timestamp:timestamp0, } = fill;
                              
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:accountant/api")]
                              extern "C" {
                                #[link_name = "process-maker-fill"]
                                fn wit_import(_: i64, _: i64, _: i64, _: i64, _: i64, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i64, _: i64, _: i64, _: i64, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(price0), wit_bindgen::rt::as_i64(size0), wit_bindgen::rt::as_i64(taker_order_id0), wit_bindgen::rt::as_i64(maker_order_id0), wit_bindgen::rt::as_i64(timestamp0));
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn get_orders() -> wit_bindgen::rt::vec::Vec::<OrderAndStatus>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 8]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:accountant/api")]
                              extern "C" {
                                #[link_name = "get-orders"]
                                fn wit_import(_: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, ){ unreachable!() }
                              wit_import(ptr0);
                              let l1 = *((ptr0 + 0) as *const i32);
                              let l2 = *((ptr0 + 4) as *const i32);
                              let base15 = l1;
                              let len15 = l2;
                              let mut result15 = Vec::with_capacity(len15 as usize);
                              for i in 0..len15 {
                                let base = base15 + i * 80;
                                let e15 = {
                                  let l3 = *((base + 0) as *const i64);
                                  let l4 = *((base + 8) as *const i64);
                                  let l5 = *((base + 16) as *const i64);
                                  let l6 = i32::from(*((base + 24) as *const u8));
                                  let l7 = *((base + 32) as *const i64);
                                  let l8 = *((base + 40) as *const i64);
                                  let l9 = *((base + 48) as *const i64);
                                  let l10 = *((base + 56) as *const i32);
                                  let l11 = *((base + 60) as *const i32);
                                  let len12 = l11 as usize;
                                  let l13 = i32::from(*((base + 64) as *const u8));
                                  let l14 = *((base + 72) as *const i64);
                                  
                                  OrderAndStatus{
                                    order: Order{
                                      id: l3 as u64,
                                      spot_pair: l4 as u64,
                                      timestamp: l5 as u64,
                                      side: super::super::super::sputnik::matching_engine::api::Side::_lift(l6 as u8),
                                      price: l7 as u64,
                                      size: l8 as u64,
                                    },
                                    status: super::super::super::sputnik::matching_engine::api::OrderStatus{
                                      id: l9 as u64,
                                      fills: Vec::from_raw_parts(l10 as *mut _, len12, len12),
                                      status: super::super::super::sputnik::matching_engine::api::Status::_lift(l13 as u8),
                                      original_size: l14 as u64,
                                    },
                                  }
                                };
                                result15.push(e15);
                              }
                              wit_bindgen::rt::dealloc(base15, (len15 as usize) * 80, 8);
                              result15
                            }
                          }
                          
                        }
                        
                      }
                      pub mod accountant_stub {
                        
                        #[allow(clippy::all)]
                        pub mod stub_accountant {
                          #[used]
                          #[doc(hidden)]
                          #[cfg(target_arch = "wasm32")]
                          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                          pub type Uri = super::super::super::golem::rpc::types::Uri;
                          pub type Fill = super::super::super::sputnik::accountant::api::Fill;
                          pub type Error = super::super::super::sputnik::accountant::api::Error;
                          pub type AssetBalance = super::super::super::sputnik::accountant::api::AssetBalance;
                          pub type Order = super::super::super::sputnik::accountant::api::Order;
                          pub type OrderStatus = super::super::super::sputnik::accountant::api::OrderStatus;
                          pub type OrderAndStatus = super::super::super::sputnik::accountant::api::OrderAndStatus;
                          
                          #[derive(Debug)]
                          #[repr(transparent)]
                          pub struct Api{
                            handle: wit_bindgen::rt::Resource<Api>,
                          }
                          
                          impl Api{
                            #[doc(hidden)]
                            pub unsafe fn from_handle(handle: u32) -> Self {
                              Self {
                                handle: wit_bindgen::rt::Resource::from_handle(handle),
                              }
                            }
                            
                            #[doc(hidden)]
                            pub fn into_handle(self) -> u32 {
                              wit_bindgen::rt::Resource::into_handle(self.handle)
                            }
                            
                            #[doc(hidden)]
                            pub fn handle(&self) -> u32 {
                              wit_bindgen::rt::Resource::handle(&self.handle)
                            }
                          }
                          
                          
                          unsafe impl wit_bindgen::rt::WasmResource for Api{
                            #[inline]
                            unsafe fn drop(_handle: u32) {
                              #[cfg(not(target_arch = "wasm32"))]
                              unreachable!();
                              
                              #[cfg(target_arch = "wasm32")]
                              {
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[resource-drop]api"]
                                  fn drop(_: u32);
                                }
                                
                                drop(_handle);
                              }
                            }
                          }
                          
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn new(location: &Uri,) -> Self{
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                let super::super::super::golem::rpc::types::Uri{ value:value0, } = location;
                                let vec1 = value0;
                                let ptr1 = vec1.as_ptr() as i32;
                                let len1 = vec1.len() as i32;
                                
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[constructor]api"]
                                  fn wit_import(_: i32, _: i32, ) -> i32;
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
                                let ret = wit_import(ptr1, len1);
                                Api::from_handle(ret as u32)
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn initialize(&self,id: u64,matching_engine_component_id: &str,registry_component_id: &str,environment: &str,) -> Result<u64,Error>{
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                
                                #[repr(align(8))]
                                struct RetArea([u8; 32]);
                                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                let vec0 = matching_engine_component_id;
                                let ptr0 = vec0.as_ptr() as i32;
                                let len0 = vec0.len() as i32;
                                let vec1 = registry_component_id;
                                let ptr1 = vec1.as_ptr() as i32;
                                let len1 = vec1.len() as i32;
                                let vec2 = environment;
                                let ptr2 = vec2.as_ptr() as i32;
                                let len2 = vec2.len() as i32;
                                let ptr3 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.initialize"]
                                  fn wit_import(_: i32, _: i64, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i64, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(id), ptr0, len0, ptr1, len1, ptr2, len2, ptr3);
                                let l4 = i32::from(*((ptr3 + 0) as *const u8));
                                match l4 {
                                  0 => {
                                    let e = {
                                      let l5 = *((ptr3 + 8) as *const i64);
                                      
                                      l5 as u64
                                    };
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l6 = i32::from(*((ptr3 + 8) as *const u8));
                                      use super::super::super::sputnik::accountant::api::Error as V16;
                                      let v16 = match l6 {
                                        0 => {
                                          let e16 = {
                                            let l7 = *((ptr3 + 16) as *const i64);
                                            
                                            l7 as u64
                                          };
                                          V16::DuplicateId(e16)
                                        }
                                        1 => {
                                          let e16 = {
                                            let l8 = *((ptr3 + 16) as *const i64);
                                            
                                            l8 as u64
                                          };
                                          V16::InsufficientFunds(e16)
                                        }
                                        2 => {
                                          let e16 = {
                                            let l9 = *((ptr3 + 16) as *const i64);
                                            
                                            l9 as u64
                                          };
                                          V16::AlreadyInitialized(e16)
                                        }
                                        3 => {
                                          V16::NotInitialized
                                        }
                                        4 => {
                                          let e16 = {
                                            let l10 = *((ptr3 + 16) as *const i64);
                                            
                                            l10 as u64
                                          };
                                          V16::InvalidAsset(e16)
                                        }
                                        5 => {
                                          let e16 = {
                                            let l11 = *((ptr3 + 16) as *const i64);
                                            
                                            l11 as u64
                                          };
                                          V16::InvalidSpotPair(e16)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 6, "invalid enum discriminant");
                                          let e16 = {
                                            let l12 = i32::from(*((ptr3 + 16) as *const u8));
                                            use super::super::super::sputnik::matching_engine::api::Error as V15;
                                            let v15 = match l12 {
                                              0 => {
                                                let e15 = {
                                                  let l13 = *((ptr3 + 24) as *const i64);
                                                  
                                                  l13 as u64
                                                };
                                                V15::DuplicateId(e15)
                                              }
                                              1 => {
                                                let e15 = {
                                                  let l14 = *((ptr3 + 24) as *const i64);
                                                  
                                                  l14 as u64
                                                };
                                                V15::MissingOrder(e15)
                                              }
                                              n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                V15::AlreadyIntialized
                                              }
                                            };
                                            
                                            v15
                                          };
                                          V16::MatchingEngineError(e16)
                                        }
                                      };
                                      
                                      v16
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn get_balances(&self,) -> wit_bindgen::rt::vec::Vec::<AssetBalance>{
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                
                                #[repr(align(4))]
                                struct RetArea([u8; 8]);
                                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                let ptr0 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.get-balances"]
                                  fn wit_import(_: i32, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, ptr0);
                                let l1 = *((ptr0 + 0) as *const i32);
                                let l2 = *((ptr0 + 4) as *const i32);
                                let base10 = l1;
                                let len10 = l2;
                                let mut result10 = Vec::with_capacity(len10 as usize);
                                for i in 0..len10 {
                                  let base = base10 + i * 40;
                                  let e10 = {
                                    let l3 = *((base + 0) as *const i64);
                                    let l4 = *((base + 8) as *const i32);
                                    let l5 = *((base + 12) as *const i32);
                                    let len6 = l5 as usize;
                                    let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                                    let l7 = i32::from(*((base + 16) as *const u8));
                                    let l8 = *((base + 24) as *const i64);
                                    let l9 = *((base + 32) as *const i64);
                                    
                                    super::super::super::sputnik::accountant::api::AssetBalance{
                                      asset: super::super::super::sputnik::registry::api::Asset{
                                        id: l3 as u64,
                                        name: wit_bindgen::rt::string_lift(bytes6),
                                        decimals: l7 as u8,
                                      },
                                      balance: l8 as u64,
                                      available_balance: l9 as u64,
                                    }
                                  };
                                  result10.push(e10);
                                }
                                wit_bindgen::rt::dealloc(base10, (len10 as usize) * 40, 8);
                                result10
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn place_order(&self,order: Order,) -> Result<OrderStatus,Error>{
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                
                                #[repr(align(8))]
                                struct RetArea([u8; 32]);
                                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                let super::super::super::sputnik::accountant::api::Order{ id:id0, spot_pair:spot_pair0, timestamp:timestamp0, side:side0, price:price0, size:size0, } = order;
                                let ptr1 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.place-order"]
                                  fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i32, _: i64, _: i64, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i32, _: i64, _: i64, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(id0), wit_bindgen::rt::as_i64(spot_pair0), wit_bindgen::rt::as_i64(timestamp0), side0.clone() as i32, wit_bindgen::rt::as_i64(price0), wit_bindgen::rt::as_i64(size0), ptr1);
                                let l2 = i32::from(*((ptr1 + 0) as *const u8));
                                match l2 {
                                  0 => {
                                    let e = {
                                      let l3 = *((ptr1 + 8) as *const i64);
                                      
                                      super::super::super::sputnik::accountant::api::OrderStatus{
                                        id: l3 as u64,
                                      }
                                    };
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l4 = i32::from(*((ptr1 + 8) as *const u8));
                                      use super::super::super::sputnik::accountant::api::Error as V14;
                                      let v14 = match l4 {
                                        0 => {
                                          let e14 = {
                                            let l5 = *((ptr1 + 16) as *const i64);
                                            
                                            l5 as u64
                                          };
                                          V14::DuplicateId(e14)
                                        }
                                        1 => {
                                          let e14 = {
                                            let l6 = *((ptr1 + 16) as *const i64);
                                            
                                            l6 as u64
                                          };
                                          V14::InsufficientFunds(e14)
                                        }
                                        2 => {
                                          let e14 = {
                                            let l7 = *((ptr1 + 16) as *const i64);
                                            
                                            l7 as u64
                                          };
                                          V14::AlreadyInitialized(e14)
                                        }
                                        3 => {
                                          V14::NotInitialized
                                        }
                                        4 => {
                                          let e14 = {
                                            let l8 = *((ptr1 + 16) as *const i64);
                                            
                                            l8 as u64
                                          };
                                          V14::InvalidAsset(e14)
                                        }
                                        5 => {
                                          let e14 = {
                                            let l9 = *((ptr1 + 16) as *const i64);
                                            
                                            l9 as u64
                                          };
                                          V14::InvalidSpotPair(e14)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 6, "invalid enum discriminant");
                                          let e14 = {
                                            let l10 = i32::from(*((ptr1 + 16) as *const u8));
                                            use super::super::super::sputnik::matching_engine::api::Error as V13;
                                            let v13 = match l10 {
                                              0 => {
                                                let e13 = {
                                                  let l11 = *((ptr1 + 24) as *const i64);
                                                  
                                                  l11 as u64
                                                };
                                                V13::DuplicateId(e13)
                                              }
                                              1 => {
                                                let e13 = {
                                                  let l12 = *((ptr1 + 24) as *const i64);
                                                  
                                                  l12 as u64
                                                };
                                                V13::MissingOrder(e13)
                                              }
                                              n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                V13::AlreadyIntialized
                                              }
                                            };
                                            
                                            v13
                                          };
                                          V14::MatchingEngineError(e14)
                                        }
                                      };
                                      
                                      v14
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn deposit(&self,asset: u64,amount: u64,) -> Result<AssetBalance,Error>{
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                
                                #[repr(align(8))]
                                struct RetArea([u8; 48]);
                                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                let ptr0 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.deposit"]
                                  fn wit_import(_: i32, _: i64, _: i64, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i64, _: i64, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(asset), wit_bindgen::rt::as_i64(amount), ptr0);
                                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                                match l1 {
                                  0 => {
                                    let e = {
                                      let l2 = *((ptr0 + 8) as *const i64);
                                      let l3 = *((ptr0 + 16) as *const i32);
                                      let l4 = *((ptr0 + 20) as *const i32);
                                      let len5 = l4 as usize;
                                      let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                                      let l6 = i32::from(*((ptr0 + 24) as *const u8));
                                      let l7 = *((ptr0 + 32) as *const i64);
                                      let l8 = *((ptr0 + 40) as *const i64);
                                      
                                      super::super::super::sputnik::accountant::api::AssetBalance{
                                        asset: super::super::super::sputnik::registry::api::Asset{
                                          id: l2 as u64,
                                          name: wit_bindgen::rt::string_lift(bytes5),
                                          decimals: l6 as u8,
                                        },
                                        balance: l7 as u64,
                                        available_balance: l8 as u64,
                                      }
                                    };
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l9 = i32::from(*((ptr0 + 8) as *const u8));
                                      use super::super::super::sputnik::accountant::api::Error as V19;
                                      let v19 = match l9 {
                                        0 => {
                                          let e19 = {
                                            let l10 = *((ptr0 + 16) as *const i64);
                                            
                                            l10 as u64
                                          };
                                          V19::DuplicateId(e19)
                                        }
                                        1 => {
                                          let e19 = {
                                            let l11 = *((ptr0 + 16) as *const i64);
                                            
                                            l11 as u64
                                          };
                                          V19::InsufficientFunds(e19)
                                        }
                                        2 => {
                                          let e19 = {
                                            let l12 = *((ptr0 + 16) as *const i64);
                                            
                                            l12 as u64
                                          };
                                          V19::AlreadyInitialized(e19)
                                        }
                                        3 => {
                                          V19::NotInitialized
                                        }
                                        4 => {
                                          let e19 = {
                                            let l13 = *((ptr0 + 16) as *const i64);
                                            
                                            l13 as u64
                                          };
                                          V19::InvalidAsset(e19)
                                        }
                                        5 => {
                                          let e19 = {
                                            let l14 = *((ptr0 + 16) as *const i64);
                                            
                                            l14 as u64
                                          };
                                          V19::InvalidSpotPair(e19)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 6, "invalid enum discriminant");
                                          let e19 = {
                                            let l15 = i32::from(*((ptr0 + 16) as *const u8));
                                            use super::super::super::sputnik::matching_engine::api::Error as V18;
                                            let v18 = match l15 {
                                              0 => {
                                                let e18 = {
                                                  let l16 = *((ptr0 + 24) as *const i64);
                                                  
                                                  l16 as u64
                                                };
                                                V18::DuplicateId(e18)
                                              }
                                              1 => {
                                                let e18 = {
                                                  let l17 = *((ptr0 + 24) as *const i64);
                                                  
                                                  l17 as u64
                                                };
                                                V18::MissingOrder(e18)
                                              }
                                              n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                V18::AlreadyIntialized
                                              }
                                            };
                                            
                                            v18
                                          };
                                          V19::MatchingEngineError(e19)
                                        }
                                      };
                                      
                                      v19
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn withdraw(&self,asset: u64,amount: u64,) -> Result<AssetBalance,Error>{
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                
                                #[repr(align(8))]
                                struct RetArea([u8; 48]);
                                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                let ptr0 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.withdraw"]
                                  fn wit_import(_: i32, _: i64, _: i64, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i64, _: i64, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(asset), wit_bindgen::rt::as_i64(amount), ptr0);
                                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                                match l1 {
                                  0 => {
                                    let e = {
                                      let l2 = *((ptr0 + 8) as *const i64);
                                      let l3 = *((ptr0 + 16) as *const i32);
                                      let l4 = *((ptr0 + 20) as *const i32);
                                      let len5 = l4 as usize;
                                      let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                                      let l6 = i32::from(*((ptr0 + 24) as *const u8));
                                      let l7 = *((ptr0 + 32) as *const i64);
                                      let l8 = *((ptr0 + 40) as *const i64);
                                      
                                      super::super::super::sputnik::accountant::api::AssetBalance{
                                        asset: super::super::super::sputnik::registry::api::Asset{
                                          id: l2 as u64,
                                          name: wit_bindgen::rt::string_lift(bytes5),
                                          decimals: l6 as u8,
                                        },
                                        balance: l7 as u64,
                                        available_balance: l8 as u64,
                                      }
                                    };
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l9 = i32::from(*((ptr0 + 8) as *const u8));
                                      use super::super::super::sputnik::accountant::api::Error as V19;
                                      let v19 = match l9 {
                                        0 => {
                                          let e19 = {
                                            let l10 = *((ptr0 + 16) as *const i64);
                                            
                                            l10 as u64
                                          };
                                          V19::DuplicateId(e19)
                                        }
                                        1 => {
                                          let e19 = {
                                            let l11 = *((ptr0 + 16) as *const i64);
                                            
                                            l11 as u64
                                          };
                                          V19::InsufficientFunds(e19)
                                        }
                                        2 => {
                                          let e19 = {
                                            let l12 = *((ptr0 + 16) as *const i64);
                                            
                                            l12 as u64
                                          };
                                          V19::AlreadyInitialized(e19)
                                        }
                                        3 => {
                                          V19::NotInitialized
                                        }
                                        4 => {
                                          let e19 = {
                                            let l13 = *((ptr0 + 16) as *const i64);
                                            
                                            l13 as u64
                                          };
                                          V19::InvalidAsset(e19)
                                        }
                                        5 => {
                                          let e19 = {
                                            let l14 = *((ptr0 + 16) as *const i64);
                                            
                                            l14 as u64
                                          };
                                          V19::InvalidSpotPair(e19)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 6, "invalid enum discriminant");
                                          let e19 = {
                                            let l15 = i32::from(*((ptr0 + 16) as *const u8));
                                            use super::super::super::sputnik::matching_engine::api::Error as V18;
                                            let v18 = match l15 {
                                              0 => {
                                                let e18 = {
                                                  let l16 = *((ptr0 + 24) as *const i64);
                                                  
                                                  l16 as u64
                                                };
                                                V18::DuplicateId(e18)
                                              }
                                              1 => {
                                                let e18 = {
                                                  let l17 = *((ptr0 + 24) as *const i64);
                                                  
                                                  l17 as u64
                                                };
                                                V18::MissingOrder(e18)
                                              }
                                              n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                V18::AlreadyIntialized
                                              }
                                            };
                                            
                                            v18
                                          };
                                          V19::MatchingEngineError(e19)
                                        }
                                      };
                                      
                                      v19
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn blocking_process_maker_fill(&self,fill: Fill,){
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                let super::super::super::sputnik::matching_engine::api::Fill{ price:price0, size:size0, taker_order_id:taker_order_id0, maker_order_id:maker_order_id0, timestamp:timestamp0, } = fill;
                                
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.blocking-process-maker-fill"]
                                  fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, ){ unreachable!() }
                                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(price0), wit_bindgen::rt::as_i64(size0), wit_bindgen::rt::as_i64(taker_order_id0), wit_bindgen::rt::as_i64(maker_order_id0), wit_bindgen::rt::as_i64(timestamp0));
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn process_maker_fill(&self,fill: Fill,){
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                let super::super::super::sputnik::matching_engine::api::Fill{ price:price0, size:size0, taker_order_id:taker_order_id0, maker_order_id:maker_order_id0, timestamp:timestamp0, } = fill;
                                
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.process-maker-fill"]
                                  fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, ){ unreachable!() }
                                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(price0), wit_bindgen::rt::as_i64(size0), wit_bindgen::rt::as_i64(taker_order_id0), wit_bindgen::rt::as_i64(maker_order_id0), wit_bindgen::rt::as_i64(timestamp0));
                              }
                            }
                          }
                          impl Api {
                            #[allow(unused_unsafe, clippy::all)]
                            pub fn get_orders(&self,) -> wit_bindgen::rt::vec::Vec::<OrderAndStatus>{
                              
                              #[allow(unused_imports)]
                              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                              unsafe {
                                
                                #[repr(align(4))]
                                struct RetArea([u8; 8]);
                                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                let ptr0 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "sputnik:accountant-stub/stub-accountant")]
                                extern "C" {
                                  #[link_name = "[method]api.get-orders"]
                                  fn wit_import(_: i32, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, ptr0);
                                let l1 = *((ptr0 + 0) as *const i32);
                                let l2 = *((ptr0 + 4) as *const i32);
                                let base15 = l1;
                                let len15 = l2;
                                let mut result15 = Vec::with_capacity(len15 as usize);
                                for i in 0..len15 {
                                  let base = base15 + i * 80;
                                  let e15 = {
                                    let l3 = *((base + 0) as *const i64);
                                    let l4 = *((base + 8) as *const i64);
                                    let l5 = *((base + 16) as *const i64);
                                    let l6 = i32::from(*((base + 24) as *const u8));
                                    let l7 = *((base + 32) as *const i64);
                                    let l8 = *((base + 40) as *const i64);
                                    let l9 = *((base + 48) as *const i64);
                                    let l10 = *((base + 56) as *const i32);
                                    let l11 = *((base + 60) as *const i32);
                                    let len12 = l11 as usize;
                                    let l13 = i32::from(*((base + 64) as *const u8));
                                    let l14 = *((base + 72) as *const i64);
                                    
                                    super::super::super::sputnik::accountant::api::OrderAndStatus{
                                      order: super::super::super::sputnik::accountant::api::Order{
                                        id: l3 as u64,
                                        spot_pair: l4 as u64,
                                        timestamp: l5 as u64,
                                        side: super::super::super::sputnik::matching_engine::api::Side::_lift(l6 as u8),
                                        price: l7 as u64,
                                        size: l8 as u64,
                                      },
                                      status: super::super::super::sputnik::matching_engine::api::OrderStatus{
                                        id: l9 as u64,
                                        fills: Vec::from_raw_parts(l10 as *mut _, len12, len12),
                                        status: super::super::super::sputnik::matching_engine::api::Status::_lift(l13 as u8),
                                        original_size: l14 as u64,
                                      },
                                    }
                                  };
                                  result15.push(e15);
                                }
                                wit_bindgen::rt::dealloc(base15, (len15 as usize) * 80, 8);
                                result15
                              }
                            }
                          }
                          
                        }
                        
                      }
                      pub mod matching_engine {
                        
                        #[allow(clippy::all)]
                        pub mod api {
                          #[used]
                          #[doc(hidden)]
                          #[cfg(target_arch = "wasm32")]
                          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                          #[derive(Clone, Copy)]
                          pub enum Error{
                            DuplicateId(u64),
                            MissingOrder(u64),
                            AlreadyIntialized,
                          }
                          impl ::core::fmt::Debug for Error {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                Error::DuplicateId(e) => {
                                  f.debug_tuple("Error::DuplicateId").field(e).finish()
                                }
                                Error::MissingOrder(e) => {
                                  f.debug_tuple("Error::MissingOrder").field(e).finish()
                                }
                                Error::AlreadyIntialized => {
                                  f.debug_tuple("Error::AlreadyIntialized").finish()
                                }
                              }
                            }
                          }
                          impl ::core::fmt::Display for Error {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              write!(f, "{:?}", self)
                            }
                          }
                          
                          impl std::error::Error for Error {}
                          #[repr(u8)]
                          #[derive(Clone, Copy, Eq, PartialEq)]
                          pub enum Side {
                            Buy,
                            Sell,
                          }
                          impl ::core::fmt::Debug for Side {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                Side::Buy => {
                                  f.debug_tuple("Side::Buy").finish()
                                }
                                Side::Sell => {
                                  f.debug_tuple("Side::Sell").finish()
                                }
                              }
                            }
                          }
                          
                          impl Side{
                            pub(crate) unsafe fn _lift(val: u8) -> Side{
                              if !cfg!(debug_assertions) {
                                return ::core::mem::transmute(val);
                              }
                              
                              match val {
                                0 => Side::Buy,
                                1 => Side::Sell,
                                
                                _ => panic!("invalid enum discriminant"),
                              }
                            }
                          }
                          
                          #[repr(C)]
                          #[derive(Clone, Copy)]
                          pub struct Order {
                            pub id: u64,
                            pub timestamp: u64,
                            pub side: Side,
                            pub price: u64,
                            pub size: u64,
                            pub trader: u64,
                          }
                          impl ::core::fmt::Debug for Order {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Order").field("id", &self.id).field("timestamp", &self.timestamp).field("side", &self.side).field("price", &self.price).field("size", &self.size).field("trader", &self.trader).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct OrderBook {
                            pub bids: wit_bindgen::rt::vec::Vec::<Order>,
                            pub asks: wit_bindgen::rt::vec::Vec::<Order>,
                          }
                          impl ::core::fmt::Debug for OrderBook {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("OrderBook").field("bids", &self.bids).field("asks", &self.asks).finish()
                            }
                          }
                          #[repr(u8)]
                          #[derive(Clone, Copy, Eq, PartialEq)]
                          pub enum Status {
                            Open,
                            Filled,
                            PartialFilled,
                            Canceled,
                          }
                          impl ::core::fmt::Debug for Status {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                Status::Open => {
                                  f.debug_tuple("Status::Open").finish()
                                }
                                Status::Filled => {
                                  f.debug_tuple("Status::Filled").finish()
                                }
                                Status::PartialFilled => {
                                  f.debug_tuple("Status::PartialFilled").finish()
                                }
                                Status::Canceled => {
                                  f.debug_tuple("Status::Canceled").finish()
                                }
                              }
                            }
                          }
                          
                          impl Status{
                            pub(crate) unsafe fn _lift(val: u8) -> Status{
                              if !cfg!(debug_assertions) {
                                return ::core::mem::transmute(val);
                              }
                              
                              match val {
                                0 => Status::Open,
                                1 => Status::Filled,
                                2 => Status::PartialFilled,
                                3 => Status::Canceled,
                                
                                _ => panic!("invalid enum discriminant"),
                              }
                            }
                          }
                          
                          #[repr(C)]
                          #[derive(Clone, Copy)]
                          pub struct Fill {
                            pub price: u64,
                            pub size: u64,
                            pub taker_order_id: u64,
                            pub maker_order_id: u64,
                            pub timestamp: u64,
                          }
                          impl ::core::fmt::Debug for Fill {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Fill").field("price", &self.price).field("size", &self.size).field("taker-order-id", &self.taker_order_id).field("maker-order-id", &self.maker_order_id).field("timestamp", &self.timestamp).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct OrderStatus {
                            pub id: u64,
                            pub fills: wit_bindgen::rt::vec::Vec::<Fill>,
                            pub status: Status,
                            pub original_size: u64,
                          }
                          impl ::core::fmt::Debug for OrderStatus {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("OrderStatus").field("id", &self.id).field("fills", &self.fills).field("status", &self.status).field("original-size", &self.original_size).finish()
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn init() -> Result<(),Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 24]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:matching-engine/api")]
                              extern "C" {
                                #[link_name = "init"]
                                fn wit_import(_: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, ){ unreachable!() }
                              wit_import(ptr0);
                              let l1 = i32::from(*((ptr0 + 0) as *const u8));
                              match l1 {
                                0 => {
                                  let e = ();
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l2 = i32::from(*((ptr0 + 8) as *const u8));
                                    let v5 = match l2 {
                                      0 => {
                                        let e5 = {
                                          let l3 = *((ptr0 + 16) as *const i64);
                                          
                                          l3 as u64
                                        };
                                        Error::DuplicateId(e5)
                                      }
                                      1 => {
                                        let e5 = {
                                          let l4 = *((ptr0 + 16) as *const i64);
                                          
                                          l4 as u64
                                        };
                                        Error::MissingOrder(e5)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        Error::AlreadyIntialized
                                      }
                                    };
                                    
                                    v5
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn place_order(order: Order,) -> Result<OrderStatus,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 40]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let Order{ id:id0, timestamp:timestamp0, side:side0, price:price0, size:size0, trader:trader0, } = order;
                              let ptr1 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:matching-engine/api")]
                              extern "C" {
                                #[link_name = "place-order"]
                                fn wit_import(_: i64, _: i64, _: i32, _: i64, _: i64, _: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i64, _: i32, _: i64, _: i64, _: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id0), wit_bindgen::rt::as_i64(timestamp0), side0.clone() as i32, wit_bindgen::rt::as_i64(price0), wit_bindgen::rt::as_i64(size0), wit_bindgen::rt::as_i64(trader0), ptr1);
                              let l2 = i32::from(*((ptr1 + 0) as *const u8));
                              match l2 {
                                0 => {
                                  let e = {
                                    let l3 = *((ptr1 + 8) as *const i64);
                                    let l4 = *((ptr1 + 16) as *const i32);
                                    let l5 = *((ptr1 + 20) as *const i32);
                                    let len6 = l5 as usize;
                                    let l7 = i32::from(*((ptr1 + 24) as *const u8));
                                    let l8 = *((ptr1 + 32) as *const i64);
                                    
                                    OrderStatus{
                                      id: l3 as u64,
                                      fills: Vec::from_raw_parts(l4 as *mut _, len6, len6),
                                      status: Status::_lift(l7 as u8),
                                      original_size: l8 as u64,
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l9 = i32::from(*((ptr1 + 8) as *const u8));
                                    let v12 = match l9 {
                                      0 => {
                                        let e12 = {
                                          let l10 = *((ptr1 + 16) as *const i64);
                                          
                                          l10 as u64
                                        };
                                        Error::DuplicateId(e12)
                                      }
                                      1 => {
                                        let e12 = {
                                          let l11 = *((ptr1 + 16) as *const i64);
                                          
                                          l11 as u64
                                        };
                                        Error::MissingOrder(e12)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        Error::AlreadyIntialized
                                      }
                                    };
                                    
                                    v12
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn cancel_order(id: u64,) -> Result<OrderStatus,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 40]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:matching-engine/api")]
                              extern "C" {
                                #[link_name = "cancel-order"]
                                fn wit_import(_: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id), ptr0);
                              let l1 = i32::from(*((ptr0 + 0) as *const u8));
                              match l1 {
                                0 => {
                                  let e = {
                                    let l2 = *((ptr0 + 8) as *const i64);
                                    let l3 = *((ptr0 + 16) as *const i32);
                                    let l4 = *((ptr0 + 20) as *const i32);
                                    let len5 = l4 as usize;
                                    let l6 = i32::from(*((ptr0 + 24) as *const u8));
                                    let l7 = *((ptr0 + 32) as *const i64);
                                    
                                    OrderStatus{
                                      id: l2 as u64,
                                      fills: Vec::from_raw_parts(l3 as *mut _, len5, len5),
                                      status: Status::_lift(l6 as u8),
                                      original_size: l7 as u64,
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l8 = i32::from(*((ptr0 + 8) as *const u8));
                                    let v11 = match l8 {
                                      0 => {
                                        let e11 = {
                                          let l9 = *((ptr0 + 16) as *const i64);
                                          
                                          l9 as u64
                                        };
                                        Error::DuplicateId(e11)
                                      }
                                      1 => {
                                        let e11 = {
                                          let l10 = *((ptr0 + 16) as *const i64);
                                          
                                          l10 as u64
                                        };
                                        Error::MissingOrder(e11)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        Error::AlreadyIntialized
                                      }
                                    };
                                    
                                    v11
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn get_order_book() -> OrderBook{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 16]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:matching-engine/api")]
                              extern "C" {
                                #[link_name = "get-order-book"]
                                fn wit_import(_: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, ){ unreachable!() }
                              wit_import(ptr0);
                              let l1 = *((ptr0 + 0) as *const i32);
                              let l2 = *((ptr0 + 4) as *const i32);
                              let base9 = l1;
                              let len9 = l2;
                              let mut result9 = Vec::with_capacity(len9 as usize);
                              for i in 0..len9 {
                                let base = base9 + i * 48;
                                let e9 = {
                                  let l3 = *((base + 0) as *const i64);
                                  let l4 = *((base + 8) as *const i64);
                                  let l5 = i32::from(*((base + 16) as *const u8));
                                  let l6 = *((base + 24) as *const i64);
                                  let l7 = *((base + 32) as *const i64);
                                  let l8 = *((base + 40) as *const i64);
                                  
                                  Order{
                                    id: l3 as u64,
                                    timestamp: l4 as u64,
                                    side: Side::_lift(l5 as u8),
                                    price: l6 as u64,
                                    size: l7 as u64,
                                    trader: l8 as u64,
                                  }
                                };
                                result9.push(e9);
                              }
                              wit_bindgen::rt::dealloc(base9, (len9 as usize) * 48, 8);
                              let l10 = *((ptr0 + 8) as *const i32);
                              let l11 = *((ptr0 + 12) as *const i32);
                              let base18 = l10;
                              let len18 = l11;
                              let mut result18 = Vec::with_capacity(len18 as usize);
                              for i in 0..len18 {
                                let base = base18 + i * 48;
                                let e18 = {
                                  let l12 = *((base + 0) as *const i64);
                                  let l13 = *((base + 8) as *const i64);
                                  let l14 = i32::from(*((base + 16) as *const u8));
                                  let l15 = *((base + 24) as *const i64);
                                  let l16 = *((base + 32) as *const i64);
                                  let l17 = *((base + 40) as *const i64);
                                  
                                  Order{
                                    id: l12 as u64,
                                    timestamp: l13 as u64,
                                    side: Side::_lift(l14 as u8),
                                    price: l15 as u64,
                                    size: l16 as u64,
                                    trader: l17 as u64,
                                  }
                                };
                                result18.push(e18);
                              }
                              wit_bindgen::rt::dealloc(base18, (len18 as usize) * 48, 8);
                              OrderBook{
                                bids: result9,
                                asks: result18,
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn get_order_status(id: u64,) -> Option<OrderStatus>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 40]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:matching-engine/api")]
                              extern "C" {
                                #[link_name = "get-order-status"]
                                fn wit_import(_: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id), ptr0);
                              let l1 = i32::from(*((ptr0 + 0) as *const u8));
                              match l1 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l2 = *((ptr0 + 8) as *const i64);
                                    let l3 = *((ptr0 + 16) as *const i32);
                                    let l4 = *((ptr0 + 20) as *const i32);
                                    let len5 = l4 as usize;
                                    let l6 = i32::from(*((ptr0 + 24) as *const u8));
                                    let l7 = *((ptr0 + 32) as *const i64);
                                    
                                    OrderStatus{
                                      id: l2 as u64,
                                      fills: Vec::from_raw_parts(l3 as *mut _, len5, len5),
                                      status: Status::_lift(l6 as u8),
                                      original_size: l7 as u64,
                                    }
                                  };
                                  Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          
                        }
                        
                      }
                      pub mod registry {
                        
                        #[allow(clippy::all)]
                        pub mod api {
                          #[used]
                          #[doc(hidden)]
                          #[cfg(target_arch = "wasm32")]
                          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                          #[derive(Clone, Copy)]
                          pub enum Error{
                            DuplicateId(u64),
                            NoSuchAsset(u64),
                          }
                          impl ::core::fmt::Debug for Error {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                Error::DuplicateId(e) => {
                                  f.debug_tuple("Error::DuplicateId").field(e).finish()
                                }
                                Error::NoSuchAsset(e) => {
                                  f.debug_tuple("Error::NoSuchAsset").field(e).finish()
                                }
                              }
                            }
                          }
                          impl ::core::fmt::Display for Error {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              write!(f, "{:?}", self)
                            }
                          }
                          
                          impl std::error::Error for Error {}
                          #[derive(Clone)]
                          pub struct Asset {
                            pub id: u64,
                            pub name: wit_bindgen::rt::string::String,
                            pub decimals: u8,
                          }
                          impl ::core::fmt::Debug for Asset {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Asset").field("id", &self.id).field("name", &self.name).field("decimals", &self.decimals).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct HydratedSpotPair {
                            pub id: u64,
                            pub name: wit_bindgen::rt::string::String,
                            pub numerator: Asset,
                            pub denominator: Asset,
                          }
                          impl ::core::fmt::Debug for HydratedSpotPair {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("HydratedSpotPair").field("id", &self.id).field("name", &self.name).field("numerator", &self.numerator).field("denominator", &self.denominator).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct SpotPair {
                            pub id: u64,
                            pub name: wit_bindgen::rt::string::String,
                            pub numerator_id: u64,
                            pub denominator_id: u64,
                          }
                          impl ::core::fmt::Debug for SpotPair {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("SpotPair").field("id", &self.id).field("name", &self.name).field("numerator-id", &self.numerator_id).field("denominator-id", &self.denominator_id).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct Trader {
                            pub id: u64,
                            pub name: wit_bindgen::rt::string::String,
                          }
                          impl ::core::fmt::Debug for Trader {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Trader").field("id", &self.id).field("name", &self.name).finish()
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn get_assets() -> wit_bindgen::rt::vec::Vec::<Asset>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 8]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:registry/api")]
                              extern "C" {
                                #[link_name = "get-assets"]
                                fn wit_import(_: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, ){ unreachable!() }
                              wit_import(ptr0);
                              let l1 = *((ptr0 + 0) as *const i32);
                              let l2 = *((ptr0 + 4) as *const i32);
                              let base8 = l1;
                              let len8 = l2;
                              let mut result8 = Vec::with_capacity(len8 as usize);
                              for i in 0..len8 {
                                let base = base8 + i * 24;
                                let e8 = {
                                  let l3 = *((base + 0) as *const i64);
                                  let l4 = *((base + 8) as *const i32);
                                  let l5 = *((base + 12) as *const i32);
                                  let len6 = l5 as usize;
                                  let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                                  let l7 = i32::from(*((base + 16) as *const u8));
                                  
                                  Asset{
                                    id: l3 as u64,
                                    name: wit_bindgen::rt::string_lift(bytes6),
                                    decimals: l7 as u8,
                                  }
                                };
                                result8.push(e8);
                              }
                              wit_bindgen::rt::dealloc(base8, (len8 as usize) * 24, 8);
                              result8
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn get_spot_pairs() -> wit_bindgen::rt::vec::Vec::<HydratedSpotPair>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 8]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:registry/api")]
                              extern "C" {
                                #[link_name = "get-spot-pairs"]
                                fn wit_import(_: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, ){ unreachable!() }
                              wit_import(ptr0);
                              let l1 = *((ptr0 + 0) as *const i32);
                              let l2 = *((ptr0 + 4) as *const i32);
                              let base17 = l1;
                              let len17 = l2;
                              let mut result17 = Vec::with_capacity(len17 as usize);
                              for i in 0..len17 {
                                let base = base17 + i * 64;
                                let e17 = {
                                  let l3 = *((base + 0) as *const i64);
                                  let l4 = *((base + 8) as *const i32);
                                  let l5 = *((base + 12) as *const i32);
                                  let len6 = l5 as usize;
                                  let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                                  let l7 = *((base + 16) as *const i64);
                                  let l8 = *((base + 24) as *const i32);
                                  let l9 = *((base + 28) as *const i32);
                                  let len10 = l9 as usize;
                                  let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                                  let l11 = i32::from(*((base + 32) as *const u8));
                                  let l12 = *((base + 40) as *const i64);
                                  let l13 = *((base + 48) as *const i32);
                                  let l14 = *((base + 52) as *const i32);
                                  let len15 = l14 as usize;
                                  let bytes15 = Vec::from_raw_parts(l13 as *mut _, len15, len15);
                                  let l16 = i32::from(*((base + 56) as *const u8));
                                  
                                  HydratedSpotPair{
                                    id: l3 as u64,
                                    name: wit_bindgen::rt::string_lift(bytes6),
                                    numerator: Asset{
                                      id: l7 as u64,
                                      name: wit_bindgen::rt::string_lift(bytes10),
                                      decimals: l11 as u8,
                                    },
                                    denominator: Asset{
                                      id: l12 as u64,
                                      name: wit_bindgen::rt::string_lift(bytes15),
                                      decimals: l16 as u8,
                                    },
                                  }
                                };
                                result17.push(e17);
                              }
                              wit_bindgen::rt::dealloc(base17, (len17 as usize) * 64, 8);
                              result17
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn get_traders() -> wit_bindgen::rt::vec::Vec::<Trader>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 8]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:registry/api")]
                              extern "C" {
                                #[link_name = "get-traders"]
                                fn wit_import(_: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, ){ unreachable!() }
                              wit_import(ptr0);
                              let l1 = *((ptr0 + 0) as *const i32);
                              let l2 = *((ptr0 + 4) as *const i32);
                              let base7 = l1;
                              let len7 = l2;
                              let mut result7 = Vec::with_capacity(len7 as usize);
                              for i in 0..len7 {
                                let base = base7 + i * 16;
                                let e7 = {
                                  let l3 = *((base + 0) as *const i64);
                                  let l4 = *((base + 8) as *const i32);
                                  let l5 = *((base + 12) as *const i32);
                                  let len6 = l5 as usize;
                                  let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                                  
                                  Trader{
                                    id: l3 as u64,
                                    name: wit_bindgen::rt::string_lift(bytes6),
                                  }
                                };
                                result7.push(e7);
                              }
                              wit_bindgen::rt::dealloc(base7, (len7 as usize) * 16, 8);
                              result7
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn add_asset(asset: &Asset,) -> Result<Asset,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 32]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let Asset{ id:id0, name:name0, decimals:decimals0, } = asset;
                              let vec1 = name0;
                              let ptr1 = vec1.as_ptr() as i32;
                              let len1 = vec1.len() as i32;
                              let ptr2 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:registry/api")]
                              extern "C" {
                                #[link_name = "add-asset"]
                                fn wit_import(_: i64, _: i32, _: i32, _: i32, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id0), ptr1, len1, wit_bindgen::rt::as_i32(decimals0), ptr2);
                              let l3 = i32::from(*((ptr2 + 0) as *const u8));
                              match l3 {
                                0 => {
                                  let e = {
                                    let l4 = *((ptr2 + 8) as *const i64);
                                    let l5 = *((ptr2 + 16) as *const i32);
                                    let l6 = *((ptr2 + 20) as *const i32);
                                    let len7 = l6 as usize;
                                    let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                                    let l8 = i32::from(*((ptr2 + 24) as *const u8));
                                    
                                    Asset{
                                      id: l4 as u64,
                                      name: wit_bindgen::rt::string_lift(bytes7),
                                      decimals: l8 as u8,
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l9 = i32::from(*((ptr2 + 8) as *const u8));
                                    let v12 = match l9 {
                                      0 => {
                                        let e12 = {
                                          let l10 = *((ptr2 + 16) as *const i64);
                                          
                                          l10 as u64
                                        };
                                        Error::DuplicateId(e12)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e12 = {
                                          let l11 = *((ptr2 + 16) as *const i64);
                                          
                                          l11 as u64
                                        };
                                        Error::NoSuchAsset(e12)
                                      }
                                    };
                                    
                                    v12
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn add_spot_pair(pair: &SpotPair,) -> Result<HydratedSpotPair,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 72]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let SpotPair{ id:id0, name:name0, numerator_id:numerator_id0, denominator_id:denominator_id0, } = pair;
                              let vec1 = name0;
                              let ptr1 = vec1.as_ptr() as i32;
                              let len1 = vec1.len() as i32;
                              let ptr2 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:registry/api")]
                              extern "C" {
                                #[link_name = "add-spot-pair"]
                                fn wit_import(_: i64, _: i32, _: i32, _: i64, _: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, _: i32, _: i64, _: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id0), ptr1, len1, wit_bindgen::rt::as_i64(numerator_id0), wit_bindgen::rt::as_i64(denominator_id0), ptr2);
                              let l3 = i32::from(*((ptr2 + 0) as *const u8));
                              match l3 {
                                0 => {
                                  let e = {
                                    let l4 = *((ptr2 + 8) as *const i64);
                                    let l5 = *((ptr2 + 16) as *const i32);
                                    let l6 = *((ptr2 + 20) as *const i32);
                                    let len7 = l6 as usize;
                                    let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                                    let l8 = *((ptr2 + 24) as *const i64);
                                    let l9 = *((ptr2 + 32) as *const i32);
                                    let l10 = *((ptr2 + 36) as *const i32);
                                    let len11 = l10 as usize;
                                    let bytes11 = Vec::from_raw_parts(l9 as *mut _, len11, len11);
                                    let l12 = i32::from(*((ptr2 + 40) as *const u8));
                                    let l13 = *((ptr2 + 48) as *const i64);
                                    let l14 = *((ptr2 + 56) as *const i32);
                                    let l15 = *((ptr2 + 60) as *const i32);
                                    let len16 = l15 as usize;
                                    let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                                    let l17 = i32::from(*((ptr2 + 64) as *const u8));
                                    
                                    HydratedSpotPair{
                                      id: l4 as u64,
                                      name: wit_bindgen::rt::string_lift(bytes7),
                                      numerator: Asset{
                                        id: l8 as u64,
                                        name: wit_bindgen::rt::string_lift(bytes11),
                                        decimals: l12 as u8,
                                      },
                                      denominator: Asset{
                                        id: l13 as u64,
                                        name: wit_bindgen::rt::string_lift(bytes16),
                                        decimals: l17 as u8,
                                      },
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l18 = i32::from(*((ptr2 + 8) as *const u8));
                                    let v21 = match l18 {
                                      0 => {
                                        let e21 = {
                                          let l19 = *((ptr2 + 16) as *const i64);
                                          
                                          l19 as u64
                                        };
                                        Error::DuplicateId(e21)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e21 = {
                                          let l20 = *((ptr2 + 16) as *const i64);
                                          
                                          l20 as u64
                                        };
                                        Error::NoSuchAsset(e21)
                                      }
                                    };
                                    
                                    v21
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn add_trader(trader: &Trader,) -> Result<Trader,Error>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(8))]
                              struct RetArea([u8; 24]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let Trader{ id:id0, name:name0, } = trader;
                              let vec1 = name0;
                              let ptr1 = vec1.as_ptr() as i32;
                              let len1 = vec1.len() as i32;
                              let ptr2 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "sputnik:registry/api")]
                              extern "C" {
                                #[link_name = "add-trader"]
                                fn wit_import(_: i64, _: i32, _: i32, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(id0), ptr1, len1, ptr2);
                              let l3 = i32::from(*((ptr2 + 0) as *const u8));
                              match l3 {
                                0 => {
                                  let e = {
                                    let l4 = *((ptr2 + 8) as *const i64);
                                    let l5 = *((ptr2 + 16) as *const i32);
                                    let l6 = *((ptr2 + 20) as *const i32);
                                    let len7 = l6 as usize;
                                    let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                                    
                                    Trader{
                                      id: l4 as u64,
                                      name: wit_bindgen::rt::string_lift(bytes7),
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l8 = i32::from(*((ptr2 + 8) as *const u8));
                                    let v11 = match l8 {
                                      0 => {
                                        let e11 = {
                                          let l9 = *((ptr2 + 16) as *const i64);
                                          
                                          l9 as u64
                                        };
                                        Error::DuplicateId(e11)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e11 = {
                                          let l10 = *((ptr2 + 16) as *const i64);
                                          
                                          l10 as u64
                                        };
                                        Error::NoSuchAsset(e11)
                                      }
                                    };
                                    
                                    v11
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          
                        }
                        
                      }
                    }
                    pub mod exports {
                      pub mod sputnik {
                        pub mod ethereummonitor {
                          
                          #[allow(clippy::all)]
                          pub mod api {
                            #[used]
                            #[doc(hidden)]
                            #[cfg(target_arch = "wasm32")]
                            static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "sputnik:ethereummonitor/api#process-deposit"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_process_deposit(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i64,arg5: i64,arg6: i64,) {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let len0 = arg1 as usize;
                                let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                                let len1 = arg3 as usize;
                                let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
                                <_GuestImpl as Guest>::process_deposit(wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1), arg4 as u64, arg5 as u64, arg6 as u64);
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "sputnik:ethereummonitor/api#complete-block"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_complete_block(arg0: i64,) {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                <_GuestImpl as Guest>::complete_block(arg0 as u64);
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "sputnik:ethereummonitor/api#block-height"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_block_height() -> i64 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let result0 = <_GuestImpl as Guest>::block_height();
                                wit_bindgen::rt::as_i64(result0)
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "sputnik:ethereummonitor/api#new-address-for-trader"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_new_address_for_trader(arg0: i64,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let result0 = <_GuestImpl as Guest>::new_address_for_trader(arg0 as u64);
                                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                                let vec2 = (result0.into_bytes()).into_boxed_slice();
                                let ptr2 = vec2.as_ptr() as i32;
                                let len2 = vec2.len() as i32;
                                ::core::mem::forget(vec2);
                                *((ptr1 + 4) as *mut i32) = len2;
                                *((ptr1 + 0) as *mut i32) = ptr2;
                                ptr1
                              }
                              
                              const _: () = {
                                #[doc(hidden)]
                                #[export_name = "cabi_post_sputnik:ethereummonitor/api#new-address-for-trader"]
                                #[allow(non_snake_case)]
                                unsafe extern "C" fn __post_return_new_address_for_trader(arg0: i32,) {
                                  let l0 = *((arg0 + 0) as *const i32);
                                  let l1 = *((arg0 + 4) as *const i32);
                                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                                }
                              };
                            };
                            use super::super::super::super::super::Component as _GuestImpl;
                            pub trait Guest {
                              fn process_deposit(address: wit_bindgen::rt::string::String,tx: wit_bindgen::rt::string::String,amount: u64,asset_id: u64,block_height: u64,);
                              fn complete_block(block: u64,);
                              fn block_height() -> u64;
                              fn new_address_for_trader(trader: u64,) -> wit_bindgen::rt::string::String;
                            }
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            
                            #[repr(align(4))]
                            struct _RetArea([u8; 8]);
                            static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
                            
                          }
                          
                        }
                      }
                    }
                    
                    #[cfg(target_arch = "wasm32")]
                    #[link_section = "component-type:ethereummonitor"]
                    #[doc(hidden)]
                    pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3997] = [3, 0, 15, 101, 116, 104, 101, 114, 101, 117, 109, 109, 111, 110, 105, 116, 111, 114, 0, 97, 115, 109, 13, 0, 1, 0, 7, 201, 1, 1, 65, 2, 1, 66, 8, 1, 64, 5, 7, 97, 100, 100, 114, 101, 115, 115, 115, 2, 116, 120, 115, 6, 97, 109, 111, 117, 110, 116, 119, 8, 97, 115, 115, 101, 116, 45, 105, 100, 119, 12, 98, 108, 111, 99, 107, 45, 104, 101, 105, 103, 104, 116, 119, 1, 0, 4, 0, 15, 112, 114, 111, 99, 101, 115, 115, 45, 100, 101, 112, 111, 115, 105, 116, 1, 0, 1, 64, 1, 5, 98, 108, 111, 99, 107, 119, 1, 0, 4, 0, 14, 99, 111, 109, 112, 108, 101, 116, 101, 45, 98, 108, 111, 99, 107, 1, 1, 1, 64, 0, 0, 119, 4, 0, 12, 98, 108, 111, 99, 107, 45, 104, 101, 105, 103, 104, 116, 1, 2, 1, 64, 1, 6, 116, 114, 97, 100, 101, 114, 119, 0, 115, 4, 0, 22, 110, 101, 119, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 111, 114, 45, 116, 114, 97, 100, 101, 114, 1, 3, 4, 1, 27, 115, 112, 117, 116, 110, 105, 107, 58, 101, 116, 104, 101, 114, 101, 117, 109, 109, 111, 110, 105, 116, 111, 114, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 184, 28, 1, 65, 2, 1, 65, 28, 1, 66, 29, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 2, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 5, 1, 112, 127, 1, 106, 1, 5, 1, 5, 1, 111, 2, 3, 119, 1, 113, 22, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 4, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 7, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 5, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 8, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 6, 104, 97, 110, 100, 108, 101, 1, 9, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 10, 1, 112, 11, 1, 114, 1, 5, 110, 111, 100, 101, 115, 12, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 13, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 15, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 17, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 3, 0, 18, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 19, 1, 104, 17, 1, 112, 14, 1, 106, 1, 14, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 22, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 23, 1, 106, 0, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 24, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 1, 25, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 29, 1, 113, 3, 12, 100, 117, 112, 108, 105, 99, 97, 116, 101, 45, 105, 100, 1, 119, 0, 13, 109, 105, 115, 115, 105, 110, 103, 45, 111, 114, 100, 101, 114, 1, 119, 0, 18, 97, 108, 114, 101, 97, 100, 121, 45, 105, 110, 116, 105, 97, 108, 105, 122, 101, 100, 0, 0, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 0, 1, 109, 2, 3, 98, 117, 121, 4, 115, 101, 108, 108, 4, 0, 4, 115, 105, 100, 101, 3, 0, 2, 1, 114, 6, 2, 105, 100, 119, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 115, 105, 100, 101, 3, 5, 112, 114, 105, 99, 101, 119, 4, 115, 105, 122, 101, 119, 6, 116, 114, 97, 100, 101, 114, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 4, 1, 112, 5, 1, 114, 2, 4, 98, 105, 100, 115, 6, 4, 97, 115, 107, 115, 6, 4, 0, 10, 111, 114, 100, 101, 114, 45, 98, 111, 111, 107, 3, 0, 7, 1, 109, 4, 4, 111, 112, 101, 110, 6, 102, 105, 108, 108, 101, 100, 14, 112, 97, 114, 116, 105, 97, 108, 45, 102, 105, 108, 108, 101, 100, 8, 99, 97, 110, 99, 101, 108, 101, 100, 4, 0, 6, 115, 116, 97, 116, 117, 115, 3, 0, 9, 1, 114, 5, 5, 112, 114, 105, 99, 101, 119, 4, 115, 105, 122, 101, 119, 14, 116, 97, 107, 101, 114, 45, 111, 114, 100, 101, 114, 45, 105, 100, 119, 14, 109, 97, 107, 101, 114, 45, 111, 114, 100, 101, 114, 45, 105, 100, 119, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 4, 102, 105, 108, 108, 3, 0, 11, 1, 112, 12, 1, 114, 4, 2, 105, 100, 119, 5, 102, 105, 108, 108, 115, 13, 6, 115, 116, 97, 116, 117, 115, 10, 13, 111, 114, 105, 103, 105, 110, 97, 108, 45, 115, 105, 122, 101, 119, 4, 0, 12, 111, 114, 100, 101, 114, 45, 115, 116, 97, 116, 117, 115, 3, 0, 14, 1, 106, 0, 1, 1, 1, 64, 0, 0, 16, 4, 0, 4, 105, 110, 105, 116, 1, 17, 1, 106, 1, 15, 1, 1, 1, 64, 1, 5, 111, 114, 100, 101, 114, 5, 0, 18, 4, 0, 11, 112, 108, 97, 99, 101, 45, 111, 114, 100, 101, 114, 1, 19, 1, 64, 1, 2, 105, 100, 119, 0, 18, 4, 0, 12, 99, 97, 110, 99, 101, 108, 45, 111, 114, 100, 101, 114, 1, 20, 1, 64, 0, 0, 8, 4, 0, 14, 103, 101, 116, 45, 111, 114, 100, 101, 114, 45, 98, 111, 111, 107, 1, 21, 1, 107, 15, 1, 64, 1, 2, 105, 100, 119, 0, 22, 4, 0, 16, 103, 101, 116, 45, 111, 114, 100, 101, 114, 45, 115, 116, 97, 116, 117, 115, 1, 23, 3, 1, 27, 115, 112, 117, 116, 110, 105, 107, 58, 109, 97, 116, 99, 104, 105, 110, 103, 45, 101, 110, 103, 105, 110, 101, 47, 97, 112, 105, 5, 1, 1, 66, 28, 1, 113, 2, 12, 100, 117, 112, 108, 105, 99, 97, 116, 101, 45, 105, 100, 1, 119, 0, 13, 110, 111, 45, 115, 117, 99, 104, 45, 97, 115, 115, 101, 116, 1, 119, 0, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 0, 1, 114, 3, 2, 105, 100, 119, 4, 110, 97, 109, 101, 115, 8, 100, 101, 99, 105, 109, 97, 108, 115, 125, 4, 0, 5, 97, 115, 115, 101, 116, 3, 0, 2, 1, 114, 4, 2, 105, 100, 119, 4, 110, 97, 109, 101, 115, 9, 110, 117, 109, 101, 114, 97, 116, 111, 114, 3, 11, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 3, 4, 0, 18, 104, 121, 100, 114, 97, 116, 101, 100, 45, 115, 112, 111, 116, 45, 112, 97, 105, 114, 3, 0, 4, 1, 114, 4, 2, 105, 100, 119, 4, 110, 97, 109, 101, 115, 12, 110, 117, 109, 101, 114, 97, 116, 111, 114, 45, 105, 100, 119, 14, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 45, 105, 100, 119, 4, 0, 9, 115, 112, 111, 116, 45, 112, 97, 105, 114, 3, 0, 6, 1, 114, 2, 2, 105, 100, 119, 4, 110, 97, 109, 101, 115, 4, 0, 6, 116, 114, 97, 100, 101, 114, 3, 0, 8, 1, 112, 3, 1, 64, 0, 0, 10, 4, 0, 10, 103, 101, 116, 45, 97, 115, 115, 101, 116, 115, 1, 11, 1, 112, 5, 1, 64, 0, 0, 12, 4, 0, 14, 103, 101, 116, 45, 115, 112, 111, 116, 45, 112, 97, 105, 114, 115, 1, 13, 1, 112, 9, 1, 64, 0, 0, 14, 4, 0, 11, 103, 101, 116, 45, 116, 114, 97, 100, 101, 114, 115, 1, 15, 1, 106, 1, 3, 1, 1, 1, 64, 1, 5, 97, 115, 115, 101, 116, 3, 0, 16, 4, 0, 9, 97, 100, 100, 45, 97, 115, 115, 101, 116, 1, 17, 1, 106, 1, 5, 1, 1, 1, 64, 1, 4, 112, 97, 105, 114, 7, 0, 18, 4, 0, 13, 97, 100, 100, 45, 115, 112, 111, 116, 45, 112, 97, 105, 114, 1, 19, 1, 106, 1, 9, 1, 1, 1, 64, 1, 6, 116, 114, 97, 100, 101, 114, 9, 0, 20, 4, 0, 10, 97, 100, 100, 45, 116, 114, 97, 100, 101, 114, 1, 21, 3, 1, 20, 115, 112, 117, 116, 110, 105, 107, 58, 114, 101, 103, 105, 115, 116, 114, 121, 47, 97, 112, 105, 5, 2, 2, 3, 0, 1, 5, 101, 114, 114, 111, 114, 2, 3, 0, 1, 12, 111, 114, 100, 101, 114, 45, 115, 116, 97, 116, 117, 115, 2, 3, 0, 2, 5, 97, 115, 115, 101, 116, 2, 3, 0, 1, 4, 115, 105, 100, 101, 2, 3, 0, 1, 4, 102, 105, 108, 108, 1, 66, 38, 2, 3, 2, 1, 3, 4, 0, 21, 109, 97, 116, 99, 104, 105, 110, 103, 45, 101, 110, 103, 105, 110, 101, 45, 101, 114, 114, 111, 114, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 13, 101, 110, 103, 105, 110, 101, 45, 115, 116, 97, 116, 117, 115, 3, 0, 2, 2, 3, 2, 1, 5, 4, 0, 5, 97, 115, 115, 101, 116, 3, 0, 4, 2, 3, 2, 1, 6, 4, 0, 4, 115, 105, 100, 101, 3, 0, 6, 2, 3, 2, 1, 7, 4, 0, 4, 102, 105, 108, 108, 3, 0, 8, 1, 113, 7, 12, 100, 117, 112, 108, 105, 99, 97, 116, 101, 45, 105, 100, 1, 119, 0, 18, 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 45, 102, 117, 110, 100, 115, 1, 119, 0, 19, 97, 108, 114, 101, 97, 100, 121, 45, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 1, 119, 0, 15, 110, 111, 116, 45, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 0, 0, 13, 105, 110, 118, 97, 108, 105, 100, 45, 97, 115, 115, 101, 116, 1, 119, 0, 17, 105, 110, 118, 97, 108, 105, 100, 45, 115, 112, 111, 116, 45, 112, 97, 105, 114, 1, 119, 0, 21, 109, 97, 116, 99, 104, 105, 110, 103, 45, 101, 110, 103, 105, 110, 101, 45, 101, 114, 114, 111, 114, 1, 1, 0, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 10, 1, 114, 3, 5, 97, 115, 115, 101, 116, 5, 7, 98, 97, 108, 97, 110, 99, 101, 119, 17, 97, 118, 97, 105, 108, 97, 98, 108, 101, 45, 98, 97, 108, 97, 110, 99, 101, 119, 4, 0, 13, 97, 115, 115, 101, 116, 45, 98, 97, 108, 97, 110, 99, 101, 3, 0, 12, 1, 114, 6, 2, 105, 100, 119, 9, 115, 112, 111, 116, 45, 112, 97, 105, 114, 119, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 115, 105, 100, 101, 7, 5, 112, 114, 105, 99, 101, 119, 4, 115, 105, 122, 101, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 14, 1, 114, 1, 2, 105, 100, 119, 4, 0, 12, 111, 114, 100, 101, 114, 45, 115, 116, 97, 116, 117, 115, 3, 0, 16, 1, 114, 2, 5, 111, 114, 100, 101, 114, 15, 6, 115, 116, 97, 116, 117, 115, 3, 4, 0, 16, 111, 114, 100, 101, 114, 45, 97, 110, 100, 45, 115, 116, 97, 116, 117, 115, 3, 0, 18, 1, 106, 1, 119, 1, 11, 1, 64, 4, 2, 105, 100, 119, 28, 109, 97, 116, 99, 104, 105, 110, 103, 45, 101, 110, 103, 105, 110, 101, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 105, 100, 115, 21, 114, 101, 103, 105, 115, 116, 114, 121, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 105, 100, 115, 11, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 115, 0, 20, 4, 0, 10, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 21, 1, 112, 13, 1, 64, 0, 0, 22, 4, 0, 12, 103, 101, 116, 45, 98, 97, 108, 97, 110, 99, 101, 115, 1, 23, 1, 106, 1, 17, 1, 11, 1, 64, 1, 5, 111, 114, 100, 101, 114, 15, 0, 24, 4, 0, 11, 112, 108, 97, 99, 101, 45, 111, 114, 100, 101, 114, 1, 25, 1, 106, 1, 13, 1, 11, 1, 64, 2, 5, 97, 115, 115, 101, 116, 119, 6, 97, 109, 111, 117, 110, 116, 119, 0, 26, 4, 0, 7, 100, 101, 112, 111, 115, 105, 116, 1, 27, 4, 0, 8, 119, 105, 116, 104, 100, 114, 97, 119, 1, 27, 1, 64, 1, 4, 102, 105, 108, 108, 9, 1, 0, 4, 0, 18, 112, 114, 111, 99, 101, 115, 115, 45, 109, 97, 107, 101, 114, 45, 102, 105, 108, 108, 1, 28, 1, 112, 19, 1, 64, 0, 0, 29, 4, 0, 10, 103, 101, 116, 45, 111, 114, 100, 101, 114, 115, 1, 30, 3, 1, 22, 115, 112, 117, 116, 110, 105, 107, 58, 97, 99, 99, 111, 117, 110, 116, 97, 110, 116, 47, 97, 112, 105, 5, 8, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 3, 21, 109, 97, 116, 99, 104, 105, 110, 103, 45, 101, 110, 103, 105, 110, 101, 45, 101, 114, 114, 111, 114, 2, 3, 0, 3, 13, 101, 110, 103, 105, 110, 101, 45, 115, 116, 97, 116, 117, 115, 2, 3, 0, 3, 5, 97, 115, 115, 101, 116, 2, 3, 0, 3, 4, 115, 105, 100, 101, 2, 3, 0, 3, 4, 102, 105, 108, 108, 2, 3, 0, 3, 5, 101, 114, 114, 111, 114, 2, 3, 0, 3, 13, 97, 115, 115, 101, 116, 45, 98, 97, 108, 97, 110, 99, 101, 2, 3, 0, 3, 5, 111, 114, 100, 101, 114, 2, 3, 0, 3, 12, 111, 114, 100, 101, 114, 45, 115, 116, 97, 116, 117, 115, 2, 3, 0, 3, 16, 111, 114, 100, 101, 114, 45, 97, 110, 100, 45, 115, 116, 97, 116, 117, 115, 1, 66, 46, 2, 3, 2, 1, 9, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 10, 4, 0, 21, 109, 97, 116, 99, 104, 105, 110, 103, 45, 101, 110, 103, 105, 110, 101, 45, 101, 114, 114, 111, 114, 3, 0, 2, 2, 3, 2, 1, 11, 4, 0, 13, 101, 110, 103, 105, 110, 101, 45, 115, 116, 97, 116, 117, 115, 3, 0, 4, 2, 3, 2, 1, 12, 4, 0, 5, 97, 115, 115, 101, 116, 3, 0, 6, 2, 3, 2, 1, 13, 4, 0, 4, 115, 105, 100, 101, 3, 0, 8, 2, 3, 2, 1, 14, 4, 0, 4, 102, 105, 108, 108, 3, 0, 10, 2, 3, 2, 1, 15, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 12, 2, 3, 2, 1, 16, 4, 0, 13, 97, 115, 115, 101, 116, 45, 98, 97, 108, 97, 110, 99, 101, 3, 0, 14, 2, 3, 2, 1, 17, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 16, 2, 3, 2, 1, 18, 4, 0, 12, 111, 114, 100, 101, 114, 45, 115, 116, 97, 116, 117, 115, 3, 0, 18, 2, 3, 2, 1, 19, 4, 0, 16, 111, 114, 100, 101, 114, 45, 97, 110, 100, 45, 115, 116, 97, 116, 117, 115, 3, 0, 20, 4, 0, 3, 97, 112, 105, 3, 1, 1, 105, 22, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 23, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 24, 1, 104, 22, 1, 106, 1, 119, 1, 13, 1, 64, 5, 4, 115, 101, 108, 102, 25, 2, 105, 100, 119, 28, 109, 97, 116, 99, 104, 105, 110, 103, 45, 101, 110, 103, 105, 110, 101, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 105, 100, 115, 21, 114, 101, 103, 105, 115, 116, 114, 121, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 105, 100, 115, 11, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 115, 0, 26, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 27, 1, 112, 15, 1, 64, 1, 4, 115, 101, 108, 102, 25, 0, 28, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 103, 101, 116, 45, 98, 97, 108, 97, 110, 99, 101, 115, 1, 29, 1, 106, 1, 19, 1, 13, 1, 64, 2, 4, 115, 101, 108, 102, 25, 5, 111, 114, 100, 101, 114, 17, 0, 30, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 112, 108, 97, 99, 101, 45, 111, 114, 100, 101, 114, 1, 31, 1, 106, 1, 15, 1, 13, 1, 64, 3, 4, 115, 101, 108, 102, 25, 5, 97, 115, 115, 101, 116, 119, 6, 97, 109, 111, 117, 110, 116, 119, 0, 32, 4, 0, 19, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 100, 101, 112, 111, 115, 105, 116, 1, 33, 4, 0, 20, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 119, 105, 116, 104, 100, 114, 97, 119, 1, 33, 1, 64, 2, 4, 115, 101, 108, 102, 25, 4, 102, 105, 108, 108, 11, 1, 0, 4, 0, 39, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 98, 108, 111, 99, 107, 105, 110, 103, 45, 112, 114, 111, 99, 101, 115, 115, 45, 109, 97, 107, 101, 114, 45, 102, 105, 108, 108, 1, 34, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 112, 114, 111, 99, 101, 115, 115, 45, 109, 97, 107, 101, 114, 45, 102, 105, 108, 108, 1, 34, 1, 112, 21, 1, 64, 1, 4, 115, 101, 108, 102, 25, 0, 35, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 103, 101, 116, 45, 111, 114, 100, 101, 114, 115, 1, 36, 3, 1, 39, 115, 112, 117, 116, 110, 105, 107, 58, 97, 99, 99, 111, 117, 110, 116, 97, 110, 116, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 97, 99, 99, 111, 117, 110, 116, 97, 110, 116, 5, 20, 1, 66, 8, 1, 64, 5, 7, 97, 100, 100, 114, 101, 115, 115, 115, 2, 116, 120, 115, 6, 97, 109, 111, 117, 110, 116, 119, 8, 97, 115, 115, 101, 116, 45, 105, 100, 119, 12, 98, 108, 111, 99, 107, 45, 104, 101, 105, 103, 104, 116, 119, 1, 0, 4, 0, 15, 112, 114, 111, 99, 101, 115, 115, 45, 100, 101, 112, 111, 115, 105, 116, 1, 0, 1, 64, 1, 5, 98, 108, 111, 99, 107, 119, 1, 0, 4, 0, 14, 99, 111, 109, 112, 108, 101, 116, 101, 45, 98, 108, 111, 99, 107, 1, 1, 1, 64, 0, 0, 119, 4, 0, 12, 98, 108, 111, 99, 107, 45, 104, 101, 105, 103, 104, 116, 1, 2, 1, 64, 1, 6, 116, 114, 97, 100, 101, 114, 119, 0, 115, 4, 0, 22, 110, 101, 119, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 111, 114, 45, 116, 114, 97, 100, 101, 114, 1, 3, 4, 1, 27, 115, 112, 117, 116, 110, 105, 107, 58, 101, 116, 104, 101, 114, 101, 117, 109, 109, 111, 110, 105, 116, 111, 114, 47, 97, 112, 105, 5, 21, 4, 1, 39, 115, 112, 117, 116, 110, 105, 107, 58, 101, 116, 104, 101, 114, 101, 117, 109, 109, 111, 110, 105, 116, 111, 114, 47, 101, 116, 104, 101, 114, 101, 117, 109, 109, 111, 110, 105, 116, 111, 114, 4, 0, 11, 21, 1, 0, 15, 101, 116, 104, 101, 114, 101, 117, 109, 109, 111, 110, 105, 116, 111, 114, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
                    
                    #[inline(never)]
                    #[doc(hidden)]
                    #[cfg(target_arch = "wasm32")]
                    pub fn __link_section() {}
                    