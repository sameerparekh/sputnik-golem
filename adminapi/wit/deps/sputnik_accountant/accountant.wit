package sputnik: accountant;

interface api {
  variant matching-engine-error {
    duplicate-id(u64),
    missing-order(u64),
    already-intialized,
  }

  record engine-status {
    id: u64,
    fills: list<fill>,
    status: status,
    original-size: u64,
  }

  record fill {
    price: u64,
    size: u64,
    taker-order-id: u64,
    maker-order-id: u64,
    timestamp: u64,
  }

  enum status {
    open, filled, partial-filled, canceled,
  }

  variant error {
    duplicate-id(u64),
    insufficient-funds(u64),
    already-initialized(u64),
    not-initialized,
    invalid-asset(u64),
    invalid-spot-pair(u64),
    matching-engine-error(matching-engine-error),
  }

  use sputnik: registry/api.{asset};

  record asset-balance {
    asset: asset,
    balance: u64,
    available-balance: u64,
  }

  enum side {
    buy,
    sell,
  }

  record order {
    id: u64,
    spot-pair: u64,
    timestamp: u64,
    side: side,
    price: u64,
    size: u64,
  }

  record order-status {
    id: u64,
  }

  record order-and-status {
    order: order,
    status: engine-status,
  }

  initialize: func(id: u64, matching-engine-component-id: string, registry-component-id: string, environment: string) -> result<u64, error>;

  get-balances: func() -> list<asset-balance>;

  place-order: func(order: order) -> result<order-status, error>;

  deposit: func(asset: u64, amount: u64) -> result<asset-balance, error>;

  withdraw: func(asset: u64, amount: u64) -> result<asset-balance, error>;

  process-maker-fill: func(fill: fill);

  get-orders: func() -> list<order-and-status>;
}

world accountant {
  import sputnik: registry-stub/stub-registry;
  export api;
}