// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
    pub mod sputnik {
        pub mod ids {

            #[allow(clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "sputnik:ids/api#get-new-id"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_get_new_id() -> i64 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::get_new_id();
                        wit_bindgen::rt::as_i64(result0)
                    }
                };
                const _: () = {
                    #[doc(hidden)]
                    #[export_name = "sputnik:ids/api#get-new-ids"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_get_new_ids(arg0: i32) -> i32 {
                        #[allow(unused_imports)]
                        use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                        // Before executing any other code, use this function to run all static
                        // constructors, if they have not yet been run. This is a hack required
                        // to work around wasi-libc ctors calling import functions to initialize
                        // the environment.
                        //
                        // This functionality will be removed once rust 1.69.0 is stable, at which
                        // point wasi-libc will no longer have this behavior.
                        //
                        // See
                        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                        // for more details.
                        #[cfg(target_arch = "wasm32")]
                        wit_bindgen::rt::run_ctors_once();

                        let result0 = <_GuestImpl as Guest>::get_new_ids(arg0 as u8);
                        let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                        let vec2 = (result0).into_boxed_slice();
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        ::core::mem::forget(vec2);
                        *((ptr1 + 4) as *mut i32) = len2;
                        *((ptr1 + 0) as *mut i32) = ptr2;
                        ptr1
                    }

                    const _: () = {
                        #[doc(hidden)]
                        #[export_name = "cabi_post_sputnik:ids/api#get-new-ids"]
                        #[allow(non_snake_case)]
                        unsafe extern "C" fn __post_return_get_new_ids(arg0: i32) {
                            let l0 = *((arg0 + 0) as *const i32);
                            let l1 = *((arg0 + 4) as *const i32);
                            let base2 = l0;
                            let len2 = l1;
                            wit_bindgen::rt::dealloc(base2, (len2 as usize) * 8, 8);
                        }
                    };
                };
                use super::super::super::super::super::Component as _GuestImpl;
                pub trait Guest {
                    fn get_new_id() -> u64;
                    fn get_new_ids(qty: u8) -> wit_bindgen::rt::vec::Vec<u64>;
                }

                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};

                #[repr(align(4))]
                struct _RetArea([u8; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:ids"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 303] = [
    3, 0, 3, 105, 100, 115, 0, 97, 115, 109, 13, 0, 1, 0, 7, 75, 1, 65, 2, 1, 66, 5, 1, 64, 0, 0,
    119, 4, 0, 10, 103, 101, 116, 45, 110, 101, 119, 45, 105, 100, 1, 0, 1, 112, 119, 1, 64, 1, 3,
    113, 116, 121, 125, 0, 1, 4, 0, 11, 103, 101, 116, 45, 110, 101, 119, 45, 105, 100, 115, 1, 2,
    4, 1, 15, 115, 112, 117, 116, 110, 105, 107, 58, 105, 100, 115, 47, 97, 112, 105, 5, 0, 11, 9,
    1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 98, 1, 65, 2, 1, 65, 2, 1, 66, 5, 1, 64, 0, 0, 119, 4, 0,
    10, 103, 101, 116, 45, 110, 101, 119, 45, 105, 100, 1, 0, 1, 112, 119, 1, 64, 1, 3, 113, 116,
    121, 125, 0, 1, 4, 0, 11, 103, 101, 116, 45, 110, 101, 119, 45, 105, 100, 115, 1, 2, 4, 1, 15,
    115, 112, 117, 116, 110, 105, 107, 58, 105, 100, 115, 47, 97, 112, 105, 5, 0, 4, 1, 15, 115,
    112, 117, 116, 110, 105, 107, 58, 105, 100, 115, 47, 105, 100, 115, 4, 0, 11, 9, 1, 0, 3, 105,
    100, 115, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123,
    125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115,
    115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110,
    116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45,
    114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
